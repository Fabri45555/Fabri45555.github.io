{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { MatCommonModule } from '@angular/material/core';\nclass MatDivider {\n  constructor() {\n    this._vertical = false;\n    this._inset = false;\n  }\n\n  /** Whether the divider is vertically aligned. */\n  get vertical() {\n    return this._vertical;\n  }\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Whether the divider is an inset divider. */\n  get inset() {\n    return this._inset;\n  }\n  set inset(value) {\n    this._inset = coerceBooleanProperty(value);\n  }\n  static #_ = this.ɵfac = function MatDivider_Factory(t) {\n    return new (t || MatDivider)();\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatDivider,\n    selectors: [[\"mat-divider\"]],\n    hostAttrs: [\"role\", \"separator\", 1, \"mat-divider\"],\n    hostVars: 7,\n    hostBindings: function MatDivider_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n        i0.ɵɵclassProp(\"mat-divider-vertical\", ctx.vertical)(\"mat-divider-horizontal\", !ctx.vertical)(\"mat-divider-inset\", ctx.inset);\n      }\n    },\n    inputs: {\n      vertical: \"vertical\",\n      inset: \"inset\"\n    },\n    decls: 0,\n    vars: 0,\n    template: function MatDivider_Template(rf, ctx) {},\n    styles: [\".mat-divider{--mat-divider-width:1px;display:block;margin:0;border-top-style:solid;border-top-color:var(--mat-divider-color);border-top-width:var(--mat-divider-width)}.mat-divider.mat-divider-vertical{border-top:0;border-right-style:solid;border-right-color:var(--mat-divider-color);border-right-width:var(--mat-divider-width)}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDivider, [{\n    type: Component,\n    args: [{\n      selector: 'mat-divider',\n      host: {\n        'role': 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mat-divider-vertical]': 'vertical',\n        '[class.mat-divider-horizontal]': '!vertical',\n        '[class.mat-divider-inset]': 'inset',\n        'class': 'mat-divider'\n      },\n      template: '',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-divider{--mat-divider-width:1px;display:block;margin:0;border-top-style:solid;border-top-color:var(--mat-divider-color);border-top-width:var(--mat-divider-width)}.mat-divider.mat-divider-vertical{border-top:0;border-right-style:solid;border-right-color:var(--mat-divider-color);border-right-width:var(--mat-divider-width)}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\"]\n    }]\n  }], null, {\n    vertical: [{\n      type: Input\n    }],\n    inset: [{\n      type: Input\n    }]\n  });\n})();\nclass MatDividerModule {\n  static #_ = this.ɵfac = function MatDividerModule_Factory(t) {\n    return new (t || MatDividerModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatDividerModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [MatCommonModule, MatCommonModule]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDividerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: [MatDivider, MatCommonModule],\n      declarations: [MatDivider]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatDivider, MatDividerModule };","map":{"version":3,"names":["i0","Component","ViewEncapsulation","ChangeDetectionStrategy","Input","NgModule","coerceBooleanProperty","MatCommonModule","MatDivider","constructor","_vertical","_inset","vertical","value","inset","_","ɵfac","MatDivider_Factory","t","_2","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","MatDivider_HostBindings","rf","ctx","ɵɵattribute","ɵɵclassProp","inputs","decls","vars","template","MatDivider_Template","styles","encapsulation","changeDetection","ngDevMode","ɵsetClassMetadata","args","selector","host","None","OnPush","MatDividerModule","MatDividerModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","imports","exports","declarations"],"sources":["/Users/fabriziovaccaro/Desktop/Fabri45555.github.io/node_modules/@angular/material/fesm2022/divider.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport {Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatCommonModule} from '@angular/material/core';\n\nclass MatDivider {\n  constructor() {\n    this._vertical = false;\n    this._inset = false;\n  }\n\n  /** Whether the divider is vertically aligned. */\n  get vertical() {\n    return this._vertical;\n  }\n\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Whether the divider is an inset divider. */\n  get inset() {\n    return this._inset;\n  }\n\n  set inset(value) {\n    this._inset = coerceBooleanProperty(value);\n  }\n\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: MatDivider,\n      deps: [],\n      target: i0.ɵɵFactoryTarget.Component\n    });\n  }\n  static {\n    this.ɵcmp = i0.ɵɵngDeclareComponent({\n      minVersion: \"14.0.0\",\n      version: \"16.1.1\",\n      type: MatDivider,\n      selector: \"mat-divider\",\n      inputs: {vertical: \"vertical\", inset: \"inset\"},\n      host: {\n        attributes: {\"role\": \"separator\"},\n        properties: {\n          \"attr.aria-orientation\": \"vertical ? \\\"vertical\\\" : \\\"horizontal\\\"\",\n          \"class.mat-divider-vertical\": \"vertical\",\n          \"class.mat-divider-horizontal\": \"!vertical\",\n          \"class.mat-divider-inset\": \"inset\"\n        },\n        classAttribute: \"mat-divider\"\n      },\n      ngImport: i0,\n      template: '',\n      isInline: true,\n      styles: [\".mat-divider{--mat-divider-width:1px;display:block;margin:0;border-top-style:solid;border-top-color:var(--mat-divider-color);border-top-width:var(--mat-divider-width)}.mat-divider.mat-divider-vertical{border-top:0;border-right-style:solid;border-right-color:var(--mat-divider-color);border-right-width:var(--mat-divider-width)}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\"],\n      changeDetection: i0.ChangeDetectionStrategy.OnPush,\n      encapsulation: i0.ViewEncapsulation.None\n    });\n  }\n}\n\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDivider, decorators: [{\n    type: Component,\n    args: [{\n      selector: 'mat-divider',\n      host: {\n        'role': 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mat-divider-vertical]': 'vertical',\n        '[class.mat-divider-horizontal]': '!vertical',\n        '[class.mat-divider-inset]': 'inset',\n        'class': 'mat-divider',\n      },\n      template: '',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-divider{--mat-divider-width:1px;display:block;margin:0;border-top-style:solid;border-top-color:var(--mat-divider-color);border-top-width:var(--mat-divider-width)}.mat-divider.mat-divider-vertical{border-top:0;border-right-style:solid;border-right-color:var(--mat-divider-color);border-right-width:var(--mat-divider-width)}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\"]\n    }]\n  }], propDecorators: {\n    vertical: [{\n      type: Input\n    }], inset: [{\n      type: Input\n    }]\n  }\n});\n\nclass MatDividerModule {\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: MatDividerModule,\n      deps: [],\n      target: i0.ɵɵFactoryTarget.NgModule\n    });\n  }\n  static {\n    this.ɵmod = i0.ɵɵngDeclareNgModule({\n      minVersion: \"14.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: MatDividerModule,\n      declarations: [MatDivider],\n      imports: [MatCommonModule],\n      exports: [MatDivider, MatCommonModule]\n    });\n  }\n  static {\n    this.ɵinj = i0.ɵɵngDeclareInjector({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: MatDividerModule,\n      imports: [MatCommonModule, MatCommonModule]\n    });\n  }\n}\n\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDividerModule, decorators: [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: [MatDivider, MatCommonModule],\n      declarations: [MatDivider],\n    }]\n  }]\n});\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatDivider, MatDividerModule};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { operate } from '../util/lift';\nexport function share(options = {}) {\n  const {\n    connector = () => new Subject(),\n    resetOnError = true,\n    resetOnComplete = true,\n    resetOnRefCountZero = true\n  } = options;\n  return wrapperSource => {\n    let connection;\n    let resetConnection;\n    let subject;\n    let refCount = 0;\n    let hasCompleted = false;\n    let hasErrored = false;\n    const cancelReset = () => {\n      resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n      resetConnection = undefined;\n    };\n    const reset = () => {\n      cancelReset();\n      connection = subject = undefined;\n      hasCompleted = hasErrored = false;\n    };\n    const resetAndUnsubscribe = () => {\n      const conn = connection;\n      reset();\n      conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n    };\n    return operate((source, subscriber) => {\n      refCount++;\n      if (!hasErrored && !hasCompleted) {\n        cancelReset();\n      }\n      const dest = subject = subject !== null && subject !== void 0 ? subject : connector();\n      subscriber.add(() => {\n        refCount--;\n        if (refCount === 0 && !hasErrored && !hasCompleted) {\n          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n        }\n      });\n      dest.subscribe(subscriber);\n      if (!connection && refCount > 0) {\n        connection = new SafeSubscriber({\n          next: value => dest.next(value),\n          error: err => {\n            hasErrored = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnError, err);\n            dest.error(err);\n          },\n          complete: () => {\n            hasCompleted = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnComplete);\n            dest.complete();\n          }\n        });\n        innerFrom(source).subscribe(connection);\n      }\n    })(wrapperSource);\n  };\n}\nfunction handleReset(reset, on, ...args) {\n  if (on === true) {\n    reset();\n    return;\n  }\n  if (on === false) {\n    return;\n  }\n  const onSubscriber = new SafeSubscriber({\n    next: () => {\n      onSubscriber.unsubscribe();\n      reset();\n    }\n  });\n  return innerFrom(on(...args)).subscribe(onSubscriber);\n}","map":{"version":3,"names":["innerFrom","Subject","SafeSubscriber","operate","share","options","connector","resetOnError","resetOnComplete","resetOnRefCountZero","wrapperSource","connection","resetConnection","subject","refCount","hasCompleted","hasErrored","cancelReset","unsubscribe","undefined","reset","resetAndUnsubscribe","conn","source","subscriber","dest","add","handleReset","subscribe","next","value","error","err","complete","on","args","onSubscriber"],"sources":["/Users/fabriziovaccaro/Desktop/Fabri45555.github.io/node_modules/rxjs/dist/esm/internal/operators/share.js"],"sourcesContent":["import {innerFrom} from '../observable/innerFrom';\nimport {Subject} from '../Subject';\nimport {SafeSubscriber} from '../Subscriber';\nimport {operate} from '../util/lift';\n\nexport function share(options = {}) {\n  const {\n    connector = () => new Subject(),\n    resetOnError = true,\n    resetOnComplete = true,\n    resetOnRefCountZero = true\n  } = options;\n  return (wrapperSource) => {\n    let connection;\n    let resetConnection;\n    let subject;\n    let refCount = 0;\n    let hasCompleted = false;\n    let hasErrored = false;\n    const cancelReset = () => {\n      resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n      resetConnection = undefined;\n    };\n    const reset = () => {\n      cancelReset();\n      connection = subject = undefined;\n      hasCompleted = hasErrored = false;\n    };\n    const resetAndUnsubscribe = () => {\n      const conn = connection;\n      reset();\n      conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n    };\n    return operate((source, subscriber) => {\n      refCount++;\n      if (!hasErrored && !hasCompleted) {\n        cancelReset();\n      }\n      const dest = (subject = subject !== null && subject !== void 0 ? subject : connector());\n      subscriber.add(() => {\n        refCount--;\n        if (refCount === 0 && !hasErrored && !hasCompleted) {\n          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n        }\n      });\n      dest.subscribe(subscriber);\n      if (!connection &&\n        refCount > 0) {\n        connection = new SafeSubscriber({\n          next: (value) => dest.next(value),\n          error: (err) => {\n            hasErrored = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnError, err);\n            dest.error(err);\n          },\n          complete: () => {\n            hasCompleted = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnComplete);\n            dest.complete();\n          },\n        });\n        innerFrom(source).subscribe(connection);\n      }\n    })(wrapperSource);\n  };\n}\n\nfunction handleReset(reset, on, ...args) {\n  if (on === true) {\n    reset();\n    return;\n  }\n  if (on === false) {\n    return;\n  }\n  const onSubscriber = new SafeSubscriber({\n    next: () => {\n      onSubscriber.unsubscribe();\n      reset();\n    },\n  });\n  return innerFrom(on(...args)).subscribe(onSubscriber);\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
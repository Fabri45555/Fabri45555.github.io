{"ast":null,"code":"import { coerceElement, coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, Input, NgModule } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\nclass MutationObserverFactory {\n  create(callback) {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n  static #_ = this.ɵfac = function MutationObserverFactory_Factory(t) {\n    return new (t || MutationObserverFactory)();\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MutationObserverFactory,\n    factory: MutationObserverFactory.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MutationObserverFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\n/** An injectable service that allows watching elements for changes to their content. */\nclass ContentObserver {\n  constructor(_mutationObserverFactory) {\n    this._mutationObserverFactory = _mutationObserverFactory;\n    /** Keeps track of the existing MutationObservers so they can be reused. */\n    this._observedElements = new Map();\n  }\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n  observe(elementOrRef) {\n    const element = coerceElement(elementOrRef);\n    return new Observable(observer => {\n      const stream = this._observeElement(element);\n      const subscription = stream.subscribe(observer);\n      return () => {\n        subscription.unsubscribe();\n        this._unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   */\n  _observeElement(element) {\n    if (!this._observedElements.has(element)) {\n      const stream = new Subject();\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true\n        });\n      }\n      this._observedElements.set(element, {\n        observer,\n        stream,\n        count: 1\n      });\n    } else {\n      this._observedElements.get(element).count++;\n    }\n    return this._observedElements.get(element).stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   */\n  _unobserveElement(element) {\n    if (this._observedElements.has(element)) {\n      this._observedElements.get(element).count--;\n      if (!this._observedElements.get(element).count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying MutationObserver for the specified element. */\n  _cleanupObserver(element) {\n    if (this._observedElements.has(element)) {\n      const {\n        observer,\n        stream\n      } = this._observedElements.get(element);\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this._observedElements.delete(element);\n    }\n  }\n  static #_ = this.ɵfac = function ContentObserver_Factory(t) {\n    return new (t || ContentObserver)(i0.ɵɵinject(MutationObserverFactory));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ContentObserver,\n    factory: ContentObserver.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ContentObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: MutationObserverFactory\n    }];\n  }, null);\n})();\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nclass CdkObserveContent {\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n\n  /** Debounce interval for emitting the changes. */\n  get debounce() {\n    return this._debounce;\n  }\n  set debounce(value) {\n    this._debounce = coerceNumberProperty(value);\n    this._subscribe();\n  }\n  constructor(_contentObserver, _elementRef, _ngZone) {\n    this._contentObserver = _contentObserver;\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    /** Event emitted for each change in the element's content. */\n    this.event = new EventEmitter();\n    this._disabled = false;\n    this._currentSubscription = null;\n  }\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n  _subscribe() {\n    this._unsubscribe();\n    const stream = this._contentObserver.observe(this._elementRef);\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n    // Consider brining it back inside the zone next time we're making breaking changes.\n    // Bringing it back inside can cause things like infinite change detection loops and changed\n    // after checked errors if people's code isn't handling it properly.\n    this._ngZone.runOutsideAngular(() => {\n      this._currentSubscription = (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n    });\n  }\n  _unsubscribe() {\n    this._currentSubscription?.unsubscribe();\n  }\n  static #_ = this.ɵfac = function CdkObserveContent_Factory(t) {\n    return new (t || CdkObserveContent)(i0.ɵɵdirectiveInject(ContentObserver), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkObserveContent,\n    selectors: [[\"\", \"cdkObserveContent\", \"\"]],\n    inputs: {\n      disabled: [\"cdkObserveContentDisabled\", \"disabled\"],\n      debounce: \"debounce\"\n    },\n    outputs: {\n      event: \"cdkObserveContent\"\n    },\n    exportAs: [\"cdkObserveContent\"]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkObserveContent, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkObserveContent]',\n      exportAs: 'cdkObserveContent'\n    }]\n  }], function () {\n    return [{\n      type: ContentObserver\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    event: [{\n      type: Output,\n      args: ['cdkObserveContent']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['cdkObserveContentDisabled']\n    }],\n    debounce: [{\n      type: Input\n    }]\n  });\n})();\nclass ObserversModule {\n  static #_ = this.ɵfac = function ObserversModule_Factory(t) {\n    return new (t || ObserversModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ObserversModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [MutationObserverFactory]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ObserversModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CdkObserveContent],\n      declarations: [CdkObserveContent],\n      providers: [MutationObserverFactory]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule };","map":{"version":3,"names":["coerceElement","coerceBooleanProperty","coerceNumberProperty","i0","Injectable","EventEmitter","Directive","Output","Input","NgModule","Observable","Subject","debounceTime","MutationObserverFactory","create","callback","MutationObserver","_","ɵfac","MutationObserverFactory_Factory","t","_2","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","ContentObserver","constructor","_mutationObserverFactory","_observedElements","Map","ngOnDestroy","forEach","element","_cleanupObserver","observe","elementOrRef","observer","stream","_observeElement","subscription","subscribe","unsubscribe","_unobserveElement","has","mutations","next","characterData","childList","subtree","set","count","get","disconnect","complete","delete","ContentObserver_Factory","ɵɵinject","CdkObserveContent","disabled","_disabled","value","_unsubscribe","_subscribe","debounce","_debounce","_contentObserver","_elementRef","_ngZone","event","_currentSubscription","ngAfterContentInit","runOutsideAngular","pipe","CdkObserveContent_Factory","ɵɵdirectiveInject","ElementRef","NgZone","ɵdir","ɵɵdefineDirective","selectors","inputs","outputs","exportAs","selector","ObserversModule","ObserversModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","providers","exports","declarations"],"sources":["/Users/fabriziovaccaro/Desktop/Fabri45555.github.io/node_modules/@angular/cdk/fesm2022/observers.mjs"],"sourcesContent":["import {coerceElement, coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport {Injectable, EventEmitter, Directive, Output, Input, NgModule} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\nclass MutationObserverFactory {\n  create(callback) {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: MutationObserverFactory,\n      deps: [],\n      target: i0.ɵɵFactoryTarget.Injectable\n    });\n  }\n  static {\n    this.ɵprov = i0.ɵɵngDeclareInjectable({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: MutationObserverFactory,\n      providedIn: 'root'\n    });\n  }\n}\n\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MutationObserverFactory, decorators: [{\n    type: Injectable,\n    args: [{providedIn: 'root'}]\n  }]\n});\n\n/** An injectable service that allows watching elements for changes to their content. */\nclass ContentObserver {\n  constructor(_mutationObserverFactory) {\n    this._mutationObserverFactory = _mutationObserverFactory;\n    /** Keeps track of the existing MutationObservers so they can be reused. */\n    this._observedElements = new Map();\n  }\n\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n\n  observe(elementOrRef) {\n    const element = coerceElement(elementOrRef);\n    return new Observable((observer) => {\n      const stream = this._observeElement(element);\n      const subscription = stream.subscribe(observer);\n      return () => {\n        subscription.unsubscribe();\n        this._unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   */\n  _observeElement(element) {\n    if (!this._observedElements.has(element)) {\n      const stream = new Subject();\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true,\n        });\n      }\n      this._observedElements.set(element, {observer, stream, count: 1});\n    } else {\n      this._observedElements.get(element).count++;\n    }\n    return this._observedElements.get(element).stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   */\n  _unobserveElement(element) {\n    if (this._observedElements.has(element)) {\n      this._observedElements.get(element).count--;\n      if (!this._observedElements.get(element).count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying MutationObserver for the specified element. */\n  _cleanupObserver(element) {\n    if (this._observedElements.has(element)) {\n      const {observer, stream} = this._observedElements.get(element);\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this._observedElements.delete(element);\n    }\n  }\n\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: ContentObserver,\n      deps: [{token: MutationObserverFactory}],\n      target: i0.ɵɵFactoryTarget.Injectable\n    });\n  }\n  static {\n    this.ɵprov = i0.ɵɵngDeclareInjectable({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: ContentObserver,\n      providedIn: 'root'\n    });\n  }\n}\n\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ContentObserver, decorators: [{\n    type: Injectable,\n    args: [{providedIn: 'root'}]\n  }], ctorParameters: function () {\n    return [{type: MutationObserverFactory}];\n  }\n});\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nclass CdkObserveContent {\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   */\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n\n  /** Debounce interval for emitting the changes. */\n  get debounce() {\n    return this._debounce;\n  }\n\n  set debounce(value) {\n    this._debounce = coerceNumberProperty(value);\n    this._subscribe();\n  }\n\n  constructor(_contentObserver, _elementRef, _ngZone) {\n    this._contentObserver = _contentObserver;\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    /** Event emitted for each change in the element's content. */\n    this.event = new EventEmitter();\n    this._disabled = false;\n    this._currentSubscription = null;\n  }\n\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n\n  _subscribe() {\n    this._unsubscribe();\n    const stream = this._contentObserver.observe(this._elementRef);\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n    // Consider brining it back inside the zone next time we're making breaking changes.\n    // Bringing it back inside can cause things like infinite change detection loops and changed\n    // after checked errors if people's code isn't handling it properly.\n    this._ngZone.runOutsideAngular(() => {\n      this._currentSubscription = (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n    });\n  }\n\n  _unsubscribe() {\n    this._currentSubscription?.unsubscribe();\n  }\n\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: CdkObserveContent,\n      deps: [{token: ContentObserver}, {token: i0.ElementRef}, {token: i0.NgZone}],\n      target: i0.ɵɵFactoryTarget.Directive\n    });\n  }\n  static {\n    this.ɵdir = i0.ɵɵngDeclareDirective({\n      minVersion: \"14.0.0\",\n      version: \"16.1.1\",\n      type: CdkObserveContent,\n      selector: \"[cdkObserveContent]\",\n      inputs: {disabled: [\"cdkObserveContentDisabled\", \"disabled\"], debounce: \"debounce\"},\n      outputs: {event: \"cdkObserveContent\"},\n      exportAs: [\"cdkObserveContent\"],\n      ngImport: i0\n    });\n  }\n}\n\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkObserveContent, decorators: [{\n    type: Directive,\n    args: [{\n      selector: '[cdkObserveContent]',\n      exportAs: 'cdkObserveContent',\n    }]\n  }], ctorParameters: function () {\n    return [{type: ContentObserver}, {type: i0.ElementRef}, {type: i0.NgZone}];\n  }, propDecorators: {\n    event: [{\n      type: Output,\n      args: ['cdkObserveContent']\n    }], disabled: [{\n      type: Input,\n      args: ['cdkObserveContentDisabled']\n    }], debounce: [{\n      type: Input\n    }]\n  }\n});\n\nclass ObserversModule {\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: ObserversModule,\n      deps: [],\n      target: i0.ɵɵFactoryTarget.NgModule\n    });\n  }\n  static {\n    this.ɵmod = i0.ɵɵngDeclareNgModule({\n      minVersion: \"14.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: ObserversModule,\n      declarations: [CdkObserveContent],\n      exports: [CdkObserveContent]\n    });\n  }\n  static {\n    this.ɵinj = i0.ɵɵngDeclareInjector({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: ObserversModule,\n      providers: [MutationObserverFactory]\n    });\n  }\n}\n\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ObserversModule, decorators: [{\n    type: NgModule,\n    args: [{\n      exports: [CdkObserveContent],\n      declarations: [CdkObserveContent],\n      providers: [MutationObserverFactory],\n    }]\n  }]\n});\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport {CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { isFunction } from '../util/isFunction';\nimport { connect } from './connect';\nexport function multicast(subjectOrSubjectFactory, selector) {\n  const subjectFactory = isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : () => subjectOrSubjectFactory;\n  if (isFunction(selector)) {\n    return connect(selector, {\n      connector: subjectFactory\n    });\n  }\n  return source => new ConnectableObservable(source, subjectFactory);\n}","map":{"version":3,"names":["ConnectableObservable","isFunction","connect","multicast","subjectOrSubjectFactory","selector","subjectFactory","connector","source"],"sources":["/Users/fabriziovaccaro/Desktop/Fabri45555.github.io/node_modules/rxjs/dist/esm/internal/operators/multicast.js"],"sourcesContent":["import {ConnectableObservable} from '../observable/ConnectableObservable';\nimport {isFunction} from '../util/isFunction';\nimport {connect} from './connect';\n\nexport function multicast(subjectOrSubjectFactory, selector) {\n  const subjectFactory = isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : () => subjectOrSubjectFactory;\n  if (isFunction(selector)) {\n    return connect(selector, {\n      connector: subjectFactory,\n    });\n  }\n  return (source) => new ConnectableObservable(source, subjectFactory);\n}\n\n"],"mappings":"AAAA,SAAQA,qBAAqB,QAAO,qCAAqC;AACzE,SAAQC,UAAU,QAAO,oBAAoB;AAC7C,SAAQC,OAAO,QAAO,WAAW;AAEjC,OAAO,SAASC,SAASA,CAACC,uBAAuB,EAAEC,QAAQ,EAAE;EAC3D,MAAMC,cAAc,GAAGL,UAAU,CAACG,uBAAuB,CAAC,GAAGA,uBAAuB,GAAG,MAAMA,uBAAuB;EACpH,IAAIH,UAAU,CAACI,QAAQ,CAAC,EAAE;IACxB,OAAOH,OAAO,CAACG,QAAQ,EAAE;MACvBE,SAAS,EAAED;IACb,CAAC,CAAC;EACJ;EACA,OAAQE,MAAM,IAAK,IAAIR,qBAAqB,CAACQ,MAAM,EAAEF,cAAc,CAAC;AACtE"},"metadata":{},"sourceType":"module","externalDependencies":[]}
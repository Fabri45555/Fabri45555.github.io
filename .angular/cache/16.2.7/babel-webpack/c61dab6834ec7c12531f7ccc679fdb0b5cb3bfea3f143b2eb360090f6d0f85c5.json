{"ast":null,"code":"import { Observable } from '../../Observable';\nimport { performanceTimestampProvider } from '../../scheduler/performanceTimestampProvider';\nimport { animationFrameProvider } from '../../scheduler/animationFrameProvider';\nexport function animationFrames(timestampProvider) {\n  return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;\n}\nfunction animationFramesFactory(timestampProvider) {\n  return new Observable(subscriber => {\n    const provider = timestampProvider || performanceTimestampProvider;\n    const start = provider.now();\n    let id = 0;\n    const run = () => {\n      if (!subscriber.closed) {\n        id = animationFrameProvider.requestAnimationFrame(timestamp => {\n          id = 0;\n          const now = provider.now();\n          subscriber.next({\n            timestamp: timestampProvider ? now : timestamp,\n            elapsed: now - start\n          });\n          run();\n        });\n      }\n    };\n    run();\n    return () => {\n      if (id) {\n        animationFrameProvider.cancelAnimationFrame(id);\n      }\n    };\n  });\n}\nconst DEFAULT_ANIMATION_FRAMES = animationFramesFactory();","map":{"version":3,"names":["Observable","performanceTimestampProvider","animationFrameProvider","animationFrames","timestampProvider","animationFramesFactory","DEFAULT_ANIMATION_FRAMES","subscriber","provider","start","now","id","run","closed","requestAnimationFrame","timestamp","next","elapsed","cancelAnimationFrame"],"sources":["/Users/fabriziovaccaro/Desktop/Fabri45555.github.io/node_modules/rxjs/dist/esm/internal/observable/dom/animationFrames.js"],"sourcesContent":["import {Observable} from '../../Observable';\nimport {performanceTimestampProvider} from '../../scheduler/performanceTimestampProvider';\nimport {animationFrameProvider} from '../../scheduler/animationFrameProvider';\n\nexport function animationFrames(timestampProvider) {\n  return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;\n}\n\nfunction animationFramesFactory(timestampProvider) {\n  return new Observable((subscriber) => {\n    const provider = timestampProvider || performanceTimestampProvider;\n    const start = provider.now();\n    let id = 0;\n    const run = () => {\n      if (!subscriber.closed) {\n        id = animationFrameProvider.requestAnimationFrame((timestamp) => {\n          id = 0;\n          const now = provider.now();\n          subscriber.next({\n            timestamp: timestampProvider ? now : timestamp,\n            elapsed: now - start,\n          });\n          run();\n        });\n      }\n    };\n    run();\n    return () => {\n      if (id) {\n        animationFrameProvider.cancelAnimationFrame(id);\n      }\n    };\n  });\n}\n\nconst DEFAULT_ANIMATION_FRAMES = animationFramesFactory();\n"],"mappings":"AAAA,SAAQA,UAAU,QAAO,kBAAkB;AAC3C,SAAQC,4BAA4B,QAAO,8CAA8C;AACzF,SAAQC,sBAAsB,QAAO,wCAAwC;AAE7E,OAAO,SAASC,eAAeA,CAACC,iBAAiB,EAAE;EACjD,OAAOA,iBAAiB,GAAGC,sBAAsB,CAACD,iBAAiB,CAAC,GAAGE,wBAAwB;AACjG;AAEA,SAASD,sBAAsBA,CAACD,iBAAiB,EAAE;EACjD,OAAO,IAAIJ,UAAU,CAAEO,UAAU,IAAK;IACpC,MAAMC,QAAQ,GAAGJ,iBAAiB,IAAIH,4BAA4B;IAClE,MAAMQ,KAAK,GAAGD,QAAQ,CAACE,GAAG,CAAC,CAAC;IAC5B,IAAIC,EAAE,GAAG,CAAC;IACV,MAAMC,GAAG,GAAGA,CAAA,KAAM;MAChB,IAAI,CAACL,UAAU,CAACM,MAAM,EAAE;QACtBF,EAAE,GAAGT,sBAAsB,CAACY,qBAAqB,CAAEC,SAAS,IAAK;UAC/DJ,EAAE,GAAG,CAAC;UACN,MAAMD,GAAG,GAAGF,QAAQ,CAACE,GAAG,CAAC,CAAC;UAC1BH,UAAU,CAACS,IAAI,CAAC;YACdD,SAAS,EAAEX,iBAAiB,GAAGM,GAAG,GAAGK,SAAS;YAC9CE,OAAO,EAAEP,GAAG,GAAGD;UACjB,CAAC,CAAC;UACFG,GAAG,CAAC,CAAC;QACP,CAAC,CAAC;MACJ;IACF,CAAC;IACDA,GAAG,CAAC,CAAC;IACL,OAAO,MAAM;MACX,IAAID,EAAE,EAAE;QACNT,sBAAsB,CAACgB,oBAAoB,CAACP,EAAE,CAAC;MACjD;IACF,CAAC;EACH,CAAC,CAAC;AACJ;AAEA,MAAML,wBAAwB,GAAGD,sBAAsB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { arrRemove } from '../util/arrRemove';\nexport function windowToggle(openings, closingSelector) {\n  return operate((source, subscriber) => {\n    const windows = [];\n    const handleError = err => {\n      while (0 < windows.length) {\n        windows.shift().error(err);\n      }\n      subscriber.error(err);\n    };\n    innerFrom(openings).subscribe(createOperatorSubscriber(subscriber, openValue => {\n      const window = new Subject();\n      windows.push(window);\n      const closingSubscription = new Subscription();\n      const closeWindow = () => {\n        arrRemove(windows, window);\n        window.complete();\n        closingSubscription.unsubscribe();\n      };\n      let closingNotifier;\n      try {\n        closingNotifier = innerFrom(closingSelector(openValue));\n      } catch (err) {\n        handleError(err);\n        return;\n      }\n      subscriber.next(window.asObservable());\n      closingSubscription.add(closingNotifier.subscribe(createOperatorSubscriber(subscriber, closeWindow, noop, handleError)));\n    }, noop));\n    source.subscribe(createOperatorSubscriber(subscriber, value => {\n      const windowsCopy = windows.slice();\n      for (const window of windowsCopy) {\n        window.next(value);\n      }\n    }, () => {\n      while (0 < windows.length) {\n        windows.shift().complete();\n      }\n      subscriber.complete();\n    }, handleError, () => {\n      while (0 < windows.length) {\n        windows.shift().unsubscribe();\n      }\n    }));\n  });\n}","map":{"version":3,"names":["Subject","Subscription","operate","innerFrom","createOperatorSubscriber","noop","arrRemove","windowToggle","openings","closingSelector","source","subscriber","windows","handleError","err","length","shift","error","subscribe","openValue","window","push","closingSubscription","closeWindow","complete","unsubscribe","closingNotifier","next","asObservable","add","value","windowsCopy","slice"],"sources":["/Users/fabriziovaccaro/Desktop/Fabri45555.github.io/node_modules/rxjs/dist/esm/internal/operators/windowToggle.js"],"sourcesContent":["import {Subject} from '../Subject';\nimport {Subscription} from '../Subscription';\nimport {operate} from '../util/lift';\nimport {innerFrom} from '../observable/innerFrom';\nimport {createOperatorSubscriber} from './OperatorSubscriber';\nimport {noop} from '../util/noop';\nimport {arrRemove} from '../util/arrRemove';\n\nexport function windowToggle(openings, closingSelector) {\n  return operate((source, subscriber) => {\n    const windows = [];\n    const handleError = (err) => {\n      while (0 < windows.length) {\n        windows.shift().error(err);\n      }\n      subscriber.error(err);\n    };\n    innerFrom(openings).subscribe(createOperatorSubscriber(subscriber, (openValue) => {\n      const window = new Subject();\n      windows.push(window);\n      const closingSubscription = new Subscription();\n      const closeWindow = () => {\n        arrRemove(windows, window);\n        window.complete();\n        closingSubscription.unsubscribe();\n      };\n      let closingNotifier;\n      try {\n        closingNotifier = innerFrom(closingSelector(openValue));\n      } catch (err) {\n        handleError(err);\n        return;\n      }\n      subscriber.next(window.asObservable());\n      closingSubscription.add(closingNotifier.subscribe(createOperatorSubscriber(subscriber, closeWindow, noop, handleError)));\n    }, noop));\n    source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n      const windowsCopy = windows.slice();\n      for (const window of windowsCopy) {\n        window.next(value);\n      }\n    }, () => {\n      while (0 < windows.length) {\n        windows.shift().complete();\n      }\n      subscriber.complete();\n    }, handleError, () => {\n      while (0 < windows.length) {\n        windows.shift().unsubscribe();\n      }\n    }));\n  });\n}\n\n"],"mappings":"AAAA,SAAQA,OAAO,QAAO,YAAY;AAClC,SAAQC,YAAY,QAAO,iBAAiB;AAC5C,SAAQC,OAAO,QAAO,cAAc;AACpC,SAAQC,SAAS,QAAO,yBAAyB;AACjD,SAAQC,wBAAwB,QAAO,sBAAsB;AAC7D,SAAQC,IAAI,QAAO,cAAc;AACjC,SAAQC,SAAS,QAAO,mBAAmB;AAE3C,OAAO,SAASC,YAAYA,CAACC,QAAQ,EAAEC,eAAe,EAAE;EACtD,OAAOP,OAAO,CAAC,CAACQ,MAAM,EAAEC,UAAU,KAAK;IACrC,MAAMC,OAAO,GAAG,EAAE;IAClB,MAAMC,WAAW,GAAIC,GAAG,IAAK;MAC3B,OAAO,CAAC,GAAGF,OAAO,CAACG,MAAM,EAAE;QACzBH,OAAO,CAACI,KAAK,CAAC,CAAC,CAACC,KAAK,CAACH,GAAG,CAAC;MAC5B;MACAH,UAAU,CAACM,KAAK,CAACH,GAAG,CAAC;IACvB,CAAC;IACDX,SAAS,CAACK,QAAQ,CAAC,CAACU,SAAS,CAACd,wBAAwB,CAACO,UAAU,EAAGQ,SAAS,IAAK;MAChF,MAAMC,MAAM,GAAG,IAAIpB,OAAO,CAAC,CAAC;MAC5BY,OAAO,CAACS,IAAI,CAACD,MAAM,CAAC;MACpB,MAAME,mBAAmB,GAAG,IAAIrB,YAAY,CAAC,CAAC;MAC9C,MAAMsB,WAAW,GAAGA,CAAA,KAAM;QACxBjB,SAAS,CAACM,OAAO,EAAEQ,MAAM,CAAC;QAC1BA,MAAM,CAACI,QAAQ,CAAC,CAAC;QACjBF,mBAAmB,CAACG,WAAW,CAAC,CAAC;MACnC,CAAC;MACD,IAAIC,eAAe;MACnB,IAAI;QACFA,eAAe,GAAGvB,SAAS,CAACM,eAAe,CAACU,SAAS,CAAC,CAAC;MACzD,CAAC,CAAC,OAAOL,GAAG,EAAE;QACZD,WAAW,CAACC,GAAG,CAAC;QAChB;MACF;MACAH,UAAU,CAACgB,IAAI,CAACP,MAAM,CAACQ,YAAY,CAAC,CAAC,CAAC;MACtCN,mBAAmB,CAACO,GAAG,CAACH,eAAe,CAACR,SAAS,CAACd,wBAAwB,CAACO,UAAU,EAAEY,WAAW,EAAElB,IAAI,EAAEQ,WAAW,CAAC,CAAC,CAAC;IAC1H,CAAC,EAAER,IAAI,CAAC,CAAC;IACTK,MAAM,CAACQ,SAAS,CAACd,wBAAwB,CAACO,UAAU,EAAGmB,KAAK,IAAK;MAC/D,MAAMC,WAAW,GAAGnB,OAAO,CAACoB,KAAK,CAAC,CAAC;MACnC,KAAK,MAAMZ,MAAM,IAAIW,WAAW,EAAE;QAChCX,MAAM,CAACO,IAAI,CAACG,KAAK,CAAC;MACpB;IACF,CAAC,EAAE,MAAM;MACP,OAAO,CAAC,GAAGlB,OAAO,CAACG,MAAM,EAAE;QACzBH,OAAO,CAACI,KAAK,CAAC,CAAC,CAACQ,QAAQ,CAAC,CAAC;MAC5B;MACAb,UAAU,CAACa,QAAQ,CAAC,CAAC;IACvB,CAAC,EAAEX,WAAW,EAAE,MAAM;MACpB,OAAO,CAAC,GAAGD,OAAO,CAACG,MAAM,EAAE;QACzBH,OAAO,CAACI,KAAK,CAAC,CAAC,CAACS,WAAW,CAAC,CAAC;MAC/B;IACF,CAAC,CAAC,CAAC;EACL,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}
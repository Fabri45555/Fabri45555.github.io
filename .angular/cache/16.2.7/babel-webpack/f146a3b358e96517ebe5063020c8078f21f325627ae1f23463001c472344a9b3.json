{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { NgModule, CSP_NONCE, Injectable, Optional, Inject } from '@angular/core';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nclass LayoutModule {\n  static #_ = this.ɵfac = function LayoutModule_Factory(t) {\n    return new (t || LayoutModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: LayoutModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LayoutModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\n\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode;\n\n/** A utility for calling matchMedia queries. */\nclass MediaMatcher {\n  constructor(_platform, _nonce) {\n    this._platform = _platform;\n    this._nonce = _nonce;\n    this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n    // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n    // call it from a different scope.\n    window.matchMedia.bind(window) : noopMatchMedia;\n  }\n\n  /**\n   * Evaluates the given media query and returns the native MediaQueryList from which results\n   * can be retrieved.\n   * Confirms the layout engine will trigger for the selector query provided and returns the\n   * MediaQueryList for the query provided.\n   */\n  matchMedia(query) {\n    if (this._platform.WEBKIT || this._platform.BLINK) {\n      createEmptyStyleRule(query, this._nonce);\n    }\n    return this._matchMedia(query);\n  }\n  static #_ = this.ɵfac = function MediaMatcher_Factory(t) {\n    return new (t || MediaMatcher)(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(CSP_NONCE, 8));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MediaMatcher,\n    factory: MediaMatcher.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MediaMatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CSP_NONCE]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * Creates an empty stylesheet that is used to work around browser inconsistencies related to\n * `matchMedia`. At the time of writing, it handles the following cases:\n * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`\n * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.\n * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules\n * inside the `@media` match existing elements on the page. We work around it by having one rule\n * targeting the `body`. See https://github.com/angular/components/issues/23546.\n */\nfunction createEmptyStyleRule(query, nonce) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n      if (nonce) {\n        mediaQueryStyleNode.nonce = nonce;\n      }\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n      document.head.appendChild(mediaQueryStyleNode);\n    }\n    if (mediaQueryStyleNode.sheet) {\n      mediaQueryStyleNode.sheet.insertRule(`@media ${query} {body{ }}`, 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {},\n    removeListener: () => {}\n  };\n}\n\n/** Utility for checking the matching state of @media queries. */\nclass BreakpointObserver {\n  constructor(_mediaMatcher, _zone) {\n    this._mediaMatcher = _mediaMatcher;\n    this._zone = _zone;\n    /**  A map of all media queries currently being listened for. */\n    this._queries = new Map();\n    /** A subject for all other observables to takeUntil based on. */\n    this._destroySubject = new Subject();\n  }\n\n  /** Completes the active subject, signalling to all other observables to complete. */\n  ngOnDestroy() {\n    this._destroySubject.next();\n    this._destroySubject.complete();\n  }\n\n  /**\n   * Whether one or more media queries match the current viewport size.\n   * @param value One or more media queries to check.\n   * @returns Whether any of the media queries match.\n   */\n  isMatched(value) {\n    const queries = splitQueries(coerceArray(value));\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n  }\n\n  /**\n   * Gets an observable of results for the given queries that will emit new results for any changes\n   * in matching of the given queries.\n   * @param value One or more media queries to check.\n   * @returns A stream of matches for the given queries.\n   */\n  observe(value) {\n    const queries = splitQueries(coerceArray(value));\n    const observables = queries.map(query => this._registerQuery(query).observable);\n    let stateObservable = combineLatest(observables);\n    // Emit the first state immediately, and then debounce the subsequent emissions.\n    stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n    return stateObservable.pipe(map(breakpointStates => {\n      const response = {\n        matches: false,\n        breakpoints: {}\n      };\n      breakpointStates.forEach(({\n        matches,\n        query\n      }) => {\n        response.matches = response.matches || matches;\n        response.breakpoints[query] = matches;\n      });\n      return response;\n    }));\n  }\n\n  /** Registers a specific query to be listened for. */\n  _registerQuery(query) {\n    // Only set up a new MediaQueryList if it is not already being listened for.\n    if (this._queries.has(query)) {\n      return this._queries.get(query);\n    }\n    const mql = this._mediaMatcher.matchMedia(query);\n    // Create callback for match changes and add it is as a listener.\n    const queryObservable = new Observable(observer => {\n      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n      // back into the zone because matchMedia is only included in Zone.js by loading the\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n      // patches it.\n      const handler = e => this._zone.run(() => observer.next(e));\n      mql.addListener(handler);\n      return () => {\n        mql.removeListener(handler);\n      };\n    }).pipe(startWith(mql), map(({\n      matches\n    }) => ({\n      query,\n      matches\n    })), takeUntil(this._destroySubject));\n    // Add the MediaQueryList to the set of queries.\n    const output = {\n      observable: queryObservable,\n      mql\n    };\n    this._queries.set(query, output);\n    return output;\n  }\n  static #_ = this.ɵfac = function BreakpointObserver_Factory(t) {\n    return new (t || BreakpointObserver)(i0.ɵɵinject(MediaMatcher), i0.ɵɵinject(i0.NgZone));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: BreakpointObserver,\n    factory: BreakpointObserver.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BreakpointObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: MediaMatcher\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n  return queries.map(query => query.split(',')).reduce((a1, a2) => a1.concat(a2)).map(query => query.trim());\n}\n\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nconst Breakpoints = {\n  XSmall: '(max-width: 599.98px)',\n  Small: '(min-width: 600px) and (max-width: 959.98px)',\n  Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n  Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n  XLarge: '(min-width: 1920px)',\n  Handset: '(max-width: 599.98px) and (orientation: portrait), ' + '(max-width: 959.98px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' + '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' + '(min-width: 1280px) and (orientation: landscape)',\n  HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n  HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)'\n};\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };","map":{"version":3,"names":["i0","NgModule","CSP_NONCE","Injectable","Optional","Inject","coerceArray","Subject","combineLatest","concat","Observable","take","skip","debounceTime","map","startWith","takeUntil","i1","LayoutModule","_","ɵfac","LayoutModule_Factory","t","_2","ɵmod","ɵɵdefineNgModule","type","_3","ɵinj","ɵɵdefineInjector","ngDevMode","ɵsetClassMetadata","args","mediaQueriesForWebkitCompatibility","Set","mediaQueryStyleNode","MediaMatcher","constructor","_platform","_nonce","_matchMedia","isBrowser","window","matchMedia","bind","noopMatchMedia","query","WEBKIT","BLINK","createEmptyStyleRule","MediaMatcher_Factory","ɵɵinject","Platform","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","undefined","decorators","nonce","has","document","createElement","setAttribute","head","appendChild","sheet","insertRule","add","e","console","error","matches","media","addListener","removeListener","BreakpointObserver","_mediaMatcher","_zone","_queries","Map","_destroySubject","ngOnDestroy","next","complete","isMatched","value","queries","splitQueries","some","mediaQuery","_registerQuery","mql","observe","observables","observable","stateObservable","pipe","breakpointStates","response","breakpoints","forEach","get","queryObservable","observer","handler","run","output","set","BreakpointObserver_Factory","NgZone","split","reduce","a1","a2","trim","Breakpoints","XSmall","Small","Medium","Large","XLarge","Handset","Tablet","Web","HandsetPortrait","TabletPortrait","WebPortrait","HandsetLandscape","TabletLandscape","WebLandscape"],"sources":["/Users/fabriziovaccaro/Desktop/Fabri45555.github.io/node_modules/@angular/cdk/fesm2022/layout.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport {NgModule, CSP_NONCE, Injectable, Optional, Inject} from '@angular/core';\nimport {coerceArray} from '@angular/cdk/coercion';\nimport {Subject, combineLatest, concat, Observable} from 'rxjs';\nimport {take, skip, debounceTime, map, startWith, takeUntil} from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\n\nclass LayoutModule {\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: LayoutModule,\n      deps: [],\n      target: i0.ɵɵFactoryTarget.NgModule\n    });\n  }\n  static {\n    this.ɵmod = i0.ɵɵngDeclareNgModule({minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: LayoutModule});\n  }\n  static {\n    this.ɵinj = i0.ɵɵngDeclareInjector({minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: LayoutModule});\n  }\n}\n\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: LayoutModule, decorators: [{\n    type: NgModule,\n    args: [{}]\n  }]\n});\n\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode;\n\n/** A utility for calling matchMedia queries. */\nclass MediaMatcher {\n  constructor(_platform, _nonce) {\n    this._platform = _platform;\n    this._nonce = _nonce;\n    this._matchMedia =\n      this._platform.isBrowser && window.matchMedia\n        ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n        // call it from a different scope.\n        window.matchMedia.bind(window)\n        : noopMatchMedia;\n  }\n\n  /**\n   * Evaluates the given media query and returns the native MediaQueryList from which results\n   * can be retrieved.\n   * Confirms the layout engine will trigger for the selector query provided and returns the\n   * MediaQueryList for the query provided.\n   */\n  matchMedia(query) {\n    if (this._platform.WEBKIT || this._platform.BLINK) {\n      createEmptyStyleRule(query, this._nonce);\n    }\n    return this._matchMedia(query);\n  }\n\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: MediaMatcher,\n      deps: [{token: i1.Platform}, {token: CSP_NONCE, optional: true}],\n      target: i0.ɵɵFactoryTarget.Injectable\n    });\n  }\n  static {\n    this.ɵprov = i0.ɵɵngDeclareInjectable({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: MediaMatcher,\n      providedIn: 'root'\n    });\n  }\n}\n\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MediaMatcher, decorators: [{\n    type: Injectable,\n    args: [{providedIn: 'root'}]\n  }], ctorParameters: function () {\n    return [{type: i1.Platform}, {\n      type: undefined, decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CSP_NONCE]\n      }]\n    }];\n  }\n});\n\n/**\n * Creates an empty stylesheet that is used to work around browser inconsistencies related to\n * `matchMedia`. At the time of writing, it handles the following cases:\n * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`\n * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.\n * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules\n * inside the `@media` match existing elements on the page. We work around it by having one rule\n * targeting the `body`. See https://github.com/angular/components/issues/23546.\n */\nfunction createEmptyStyleRule(query, nonce) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n      if (nonce) {\n        mediaQueryStyleNode.nonce = nonce;\n      }\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n      document.head.appendChild(mediaQueryStyleNode);\n    }\n    if (mediaQueryStyleNode.sheet) {\n      mediaQueryStyleNode.sheet.insertRule(`@media ${query} {body{ }}`, 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {\n    },\n    removeListener: () => {\n    },\n  };\n}\n\n/** Utility for checking the matching state of @media queries. */\nclass BreakpointObserver {\n  constructor(_mediaMatcher, _zone) {\n    this._mediaMatcher = _mediaMatcher;\n    this._zone = _zone;\n    /**  A map of all media queries currently being listened for. */\n    this._queries = new Map();\n    /** A subject for all other observables to takeUntil based on. */\n    this._destroySubject = new Subject();\n  }\n\n  /** Completes the active subject, signalling to all other observables to complete. */\n  ngOnDestroy() {\n    this._destroySubject.next();\n    this._destroySubject.complete();\n  }\n\n  /**\n   * Whether one or more media queries match the current viewport size.\n   * @param value One or more media queries to check.\n   * @returns Whether any of the media queries match.\n   */\n  isMatched(value) {\n    const queries = splitQueries(coerceArray(value));\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n  }\n\n  /**\n   * Gets an observable of results for the given queries that will emit new results for any changes\n   * in matching of the given queries.\n   * @param value One or more media queries to check.\n   * @returns A stream of matches for the given queries.\n   */\n  observe(value) {\n    const queries = splitQueries(coerceArray(value));\n    const observables = queries.map(query => this._registerQuery(query).observable);\n    let stateObservable = combineLatest(observables);\n    // Emit the first state immediately, and then debounce the subsequent emissions.\n    stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n    return stateObservable.pipe(map(breakpointStates => {\n      const response = {\n        matches: false,\n        breakpoints: {},\n      };\n      breakpointStates.forEach(({matches, query}) => {\n        response.matches = response.matches || matches;\n        response.breakpoints[query] = matches;\n      });\n      return response;\n    }));\n  }\n\n  /** Registers a specific query to be listened for. */\n  _registerQuery(query) {\n    // Only set up a new MediaQueryList if it is not already being listened for.\n    if (this._queries.has(query)) {\n      return this._queries.get(query);\n    }\n    const mql = this._mediaMatcher.matchMedia(query);\n    // Create callback for match changes and add it is as a listener.\n    const queryObservable = new Observable((observer) => {\n      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n      // back into the zone because matchMedia is only included in Zone.js by loading the\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n      // patches it.\n      const handler = (e) => this._zone.run(() => observer.next(e));\n      mql.addListener(handler);\n      return () => {\n        mql.removeListener(handler);\n      };\n    }).pipe(startWith(mql), map(({matches}) => ({query, matches})), takeUntil(this._destroySubject));\n    // Add the MediaQueryList to the set of queries.\n    const output = {observable: queryObservable, mql};\n    this._queries.set(query, output);\n    return output;\n  }\n\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: BreakpointObserver,\n      deps: [{token: MediaMatcher}, {token: i0.NgZone}],\n      target: i0.ɵɵFactoryTarget.Injectable\n    });\n  }\n  static {\n    this.ɵprov = i0.ɵɵngDeclareInjectable({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: BreakpointObserver,\n      providedIn: 'root'\n    });\n  }\n}\n\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: BreakpointObserver, decorators: [{\n    type: Injectable,\n    args: [{providedIn: 'root'}]\n  }], ctorParameters: function () {\n    return [{type: MediaMatcher}, {type: i0.NgZone}];\n  }\n});\n\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n  return queries\n    .map(query => query.split(','))\n    .reduce((a1, a2) => a1.concat(a2))\n    .map(query => query.trim());\n}\n\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nconst Breakpoints = {\n  XSmall: '(max-width: 599.98px)',\n  Small: '(min-width: 600px) and (max-width: 959.98px)',\n  Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n  Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n  XLarge: '(min-width: 1920px)',\n  Handset: '(max-width: 599.98px) and (orientation: portrait), ' +\n    '(max-width: 959.98px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n    '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' +\n    '(min-width: 1280px) and (orientation: landscape)',\n  HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n  HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport {BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
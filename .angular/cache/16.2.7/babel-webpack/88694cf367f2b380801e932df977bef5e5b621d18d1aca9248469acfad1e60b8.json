{"ast":null,"code":"import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { timer } from '../observable/timer';\nexport function repeat(countOrConfig) {\n  let count = Infinity;\n  let delay;\n  if (countOrConfig != null) {\n    if (typeof countOrConfig === 'object') {\n      ({\n        count = Infinity,\n        delay\n      } = countOrConfig);\n    } else {\n      count = countOrConfig;\n    }\n  }\n  return count <= 0 ? () => EMPTY : operate((source, subscriber) => {\n    let soFar = 0;\n    let sourceSub;\n    const resubscribe = () => {\n      sourceSub === null || sourceSub === void 0 ? void 0 : sourceSub.unsubscribe();\n      sourceSub = null;\n      if (delay != null) {\n        const notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(soFar));\n        const notifierSubscriber = createOperatorSubscriber(subscriber, () => {\n          notifierSubscriber.unsubscribe();\n          subscribeToSource();\n        });\n        notifier.subscribe(notifierSubscriber);\n      } else {\n        subscribeToSource();\n      }\n    };\n    const subscribeToSource = () => {\n      let syncUnsub = false;\n      sourceSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, () => {\n        if (++soFar < count) {\n          if (sourceSub) {\n            resubscribe();\n          } else {\n            syncUnsub = true;\n          }\n        } else {\n          subscriber.complete();\n        }\n      }));\n      if (syncUnsub) {\n        resubscribe();\n      }\n    };\n    subscribeToSource();\n  });\n}","map":{"version":3,"names":["EMPTY","operate","createOperatorSubscriber","innerFrom","timer","repeat","countOrConfig","count","Infinity","delay","source","subscriber","soFar","sourceSub","resubscribe","unsubscribe","notifier","notifierSubscriber","subscribeToSource","subscribe","syncUnsub","undefined","complete"],"sources":["/Users/fabriziovaccaro/Desktop/Fabri45555.github.io/node_modules/rxjs/dist/esm/internal/operators/repeat.js"],"sourcesContent":["import {EMPTY} from '../observable/empty';\nimport {operate} from '../util/lift';\nimport {createOperatorSubscriber} from './OperatorSubscriber';\nimport {innerFrom} from '../observable/innerFrom';\nimport {timer} from '../observable/timer';\n\nexport function repeat(countOrConfig) {\n  let count = Infinity;\n  let delay;\n  if (countOrConfig != null) {\n    if (typeof countOrConfig === 'object') {\n      ({count = Infinity, delay} = countOrConfig);\n    } else {\n      count = countOrConfig;\n    }\n  }\n  return count <= 0\n    ? () => EMPTY\n    : operate((source, subscriber) => {\n      let soFar = 0;\n      let sourceSub;\n      const resubscribe = () => {\n        sourceSub === null || sourceSub === void 0 ? void 0 : sourceSub.unsubscribe();\n        sourceSub = null;\n        if (delay != null) {\n          const notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(soFar));\n          const notifierSubscriber = createOperatorSubscriber(subscriber, () => {\n            notifierSubscriber.unsubscribe();\n            subscribeToSource();\n          });\n          notifier.subscribe(notifierSubscriber);\n        } else {\n          subscribeToSource();\n        }\n      };\n      const subscribeToSource = () => {\n        let syncUnsub = false;\n        sourceSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, () => {\n          if (++soFar < count) {\n            if (sourceSub) {\n              resubscribe();\n            } else {\n              syncUnsub = true;\n            }\n          } else {\n            subscriber.complete();\n          }\n        }));\n        if (syncUnsub) {\n          resubscribe();\n        }\n      };\n      subscribeToSource();\n    });\n}\n\n"],"mappings":"AAAA,SAAQA,KAAK,QAAO,qBAAqB;AACzC,SAAQC,OAAO,QAAO,cAAc;AACpC,SAAQC,wBAAwB,QAAO,sBAAsB;AAC7D,SAAQC,SAAS,QAAO,yBAAyB;AACjD,SAAQC,KAAK,QAAO,qBAAqB;AAEzC,OAAO,SAASC,MAAMA,CAACC,aAAa,EAAE;EACpC,IAAIC,KAAK,GAAGC,QAAQ;EACpB,IAAIC,KAAK;EACT,IAAIH,aAAa,IAAI,IAAI,EAAE;IACzB,IAAI,OAAOA,aAAa,KAAK,QAAQ,EAAE;MACrC,CAAC;QAACC,KAAK,GAAGC,QAAQ;QAAEC;MAAK,CAAC,GAAGH,aAAa;IAC5C,CAAC,MAAM;MACLC,KAAK,GAAGD,aAAa;IACvB;EACF;EACA,OAAOC,KAAK,IAAI,CAAC,GACb,MAAMP,KAAK,GACXC,OAAO,CAAC,CAACS,MAAM,EAAEC,UAAU,KAAK;IAChC,IAAIC,KAAK,GAAG,CAAC;IACb,IAAIC,SAAS;IACb,MAAMC,WAAW,GAAGA,CAAA,KAAM;MACxBD,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,SAAS,CAACE,WAAW,CAAC,CAAC;MAC7EF,SAAS,GAAG,IAAI;MAChB,IAAIJ,KAAK,IAAI,IAAI,EAAE;QACjB,MAAMO,QAAQ,GAAG,OAAOP,KAAK,KAAK,QAAQ,GAAGL,KAAK,CAACK,KAAK,CAAC,GAAGN,SAAS,CAACM,KAAK,CAACG,KAAK,CAAC,CAAC;QACnF,MAAMK,kBAAkB,GAAGf,wBAAwB,CAACS,UAAU,EAAE,MAAM;UACpEM,kBAAkB,CAACF,WAAW,CAAC,CAAC;UAChCG,iBAAiB,CAAC,CAAC;QACrB,CAAC,CAAC;QACFF,QAAQ,CAACG,SAAS,CAACF,kBAAkB,CAAC;MACxC,CAAC,MAAM;QACLC,iBAAiB,CAAC,CAAC;MACrB;IACF,CAAC;IACD,MAAMA,iBAAiB,GAAGA,CAAA,KAAM;MAC9B,IAAIE,SAAS,GAAG,KAAK;MACrBP,SAAS,GAAGH,MAAM,CAACS,SAAS,CAACjB,wBAAwB,CAACS,UAAU,EAAEU,SAAS,EAAE,MAAM;QACjF,IAAI,EAAET,KAAK,GAAGL,KAAK,EAAE;UACnB,IAAIM,SAAS,EAAE;YACbC,WAAW,CAAC,CAAC;UACf,CAAC,MAAM;YACLM,SAAS,GAAG,IAAI;UAClB;QACF,CAAC,MAAM;UACLT,UAAU,CAACW,QAAQ,CAAC,CAAC;QACvB;MACF,CAAC,CAAC,CAAC;MACH,IAAIF,SAAS,EAAE;QACbN,WAAW,CAAC,CAAC;MACf;IACF,CAAC;IACDI,iBAAiB,CAAC,CAAC;EACrB,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}
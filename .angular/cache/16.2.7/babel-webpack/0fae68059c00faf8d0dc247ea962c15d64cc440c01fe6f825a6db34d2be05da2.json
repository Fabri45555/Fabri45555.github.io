{"ast":null,"code":"import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, Optional, ElementRef, ApplicationRef, ANIMATION_MODULE_TYPE, InjectionToken, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _getEventTarget, _isTestEnvironment } from '@angular/cdk/platform';\nimport { filter, take, takeUntil, takeWhile } from 'rxjs/operators';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nconst scrollBehaviorSupported = supportsScrollBehavior();\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n  constructor(_viewportRuler, document) {\n    this._viewportRuler = _viewportRuler;\n    this._previousHTMLStyles = {\n      top: '',\n      left: ''\n    };\n    this._isEnabled = false;\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() {}\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement;\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement;\n      const body = this._document.body;\n      const htmlStyle = html.style;\n      const bodyStyle = body.style;\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n      this._isEnabled = false;\n      htmlStyle.left = this._previousHTMLStyles.left;\n      htmlStyle.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n      // because it can throw off feature detections in `supportsScrollBehavior` which\n      // checks for `'scrollBehavior' in documentElement.style`.\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n      }\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n        bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n      }\n    }\n  }\n  _canBeEnabled() {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement;\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n    const body = this._document.body;\n    const viewport = this._viewportRuler.getViewportSize();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n  return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n  constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._config = _config;\n    this._scrollSubscription = null;\n    /** Detaches the overlay ref and disables the scroll strategy. */\n    this._detach = () => {\n      this.disable();\n      if (this._overlayRef.hasAttached()) {\n        this._ngZone.run(() => this._overlayRef.detach());\n      }\n    };\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables the closing of the attached overlay on scroll. */\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n    const stream = this._scrollDispatcher.scrolled(0).pipe(filter(scrollable => {\n      return !scrollable || !this._overlayRef.overlayElement.contains(scrollable.getElementRef().nativeElement);\n    }));\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n\n  /** Disables the closing the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n  detach() {\n    this.disable();\n    this._overlayRef = null;\n  }\n}\n\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() {}\n\n  /** Does nothing, as this scroll strategy is a no-op. */\n  disable() {}\n\n  /** Does nothing, as this scroll strategy is a no-op. */\n  attach() {}\n}\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n  constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewportRuler = _viewportRuler;\n    this._ngZone = _ngZone;\n    this._config = _config;\n    this._scrollSubscription = null;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables repositioning of the attached overlay on scroll. */\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition();\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n          const {\n            width,\n            height\n          } = this._viewportRuler.getViewportSize();\n          // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n          const parentRects = [{\n            width,\n            height,\n            bottom: height,\n            right: width,\n            top: 0,\n            left: 0\n          }];\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n\n  /** Disables repositioning of the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n  detach() {\n    this.disable();\n    this._overlayRef = null;\n  }\n}\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n  constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewportRuler = _viewportRuler;\n    this._ngZone = _ngZone;\n    /** Do nothing on scroll. */\n    this.noop = () => new NoopScrollStrategy();\n    /**\n     * Close the overlay as soon as the user scrolls.\n     * @param config Configuration to be used inside the scroll strategy.\n     */\n    this.close = config => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n    /** Block scrolling. */\n    this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n    /**\n     * Update the overlay's position on scroll.\n     * @param config Configuration to be used inside the scroll strategy.\n     * Allows debouncing the reposition calls.\n     */\n    this.reposition = config => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n    this._document = document;\n  }\n  static #_ = this.ɵfac = function ScrollStrategyOptions_Factory(t) {\n    return new (t || ScrollStrategyOptions)(i0.ɵɵinject(i1.ScrollDispatcher), i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ScrollStrategyOptions,\n    factory: ScrollStrategyOptions.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.ScrollDispatcher\n    }, {\n      type: i1.ViewportRuler\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n  constructor(config) {\n    /** Strategy to be used when handling scroll events while the overlay is open. */\n    this.scrollStrategy = new NoopScrollStrategy();\n    /** Custom class to add to the overlay pane. */\n    this.panelClass = '';\n    /** Whether the overlay has a backdrop. */\n    this.hasBackdrop = false;\n    /** Custom class to add to the backdrop */\n    this.backdropClass = 'cdk-overlay-dark-backdrop';\n    /**\n     * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n    this.disposeOnNavigation = false;\n    if (config) {\n      // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n      // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n      // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n      const configKeys = Object.keys(config);\n      for (const key of configKeys) {\n        if (config[key] !== undefined) {\n          // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n          // as \"I don't know *which* key this is, so the only valid value is the intersection\n          // of all the possible values.\" In this case, that happens to be `undefined`. TypeScript\n          // is not smart enough to see that the right-hand-side is actually an access of the same\n          // exact type with the same exact key, meaning that the value type must be identical.\n          // So we use `any` to work around this.\n          this[key] = config[key];\n        }\n      }\n    }\n  }\n}\n\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n  constructor(origin, overlay, /** Offset along the X axis. */\n  offsetX, /** Offset along the Y axis. */\n  offsetY, /** Class(es) to be applied to the panel while this position is active. */\n  panelClass) {\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n    this.panelClass = panelClass;\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n  constructor( /** The position used as a result of this change. */\n  connectionPair, /** @docs-private */\n  scrollableViewProperties) {\n    this.connectionPair = connectionPair;\n    this.scrollableViewProperties = scrollableViewProperties;\n  }\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` + `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` + `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n  constructor(document) {\n    /** Currently attached overlays in the order they were attached. */\n    this._attachedOverlays = [];\n    this._document = document;\n  }\n  ngOnDestroy() {\n    this.detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef) {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef) {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this.detach();\n    }\n  }\n  static #_ = this.ɵfac = function BaseOverlayDispatcher_Factory(t) {\n    return new (t || BaseOverlayDispatcher)(i0.ɵɵinject(DOCUMENT));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: BaseOverlayDispatcher,\n    factory: BaseOverlayDispatcher.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseOverlayDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n  constructor(document, /** @breaking-change 14.0.0 _ngZone will be required. */\n  _ngZone) {\n    super(document);\n    this._ngZone = _ngZone;\n    /** Keyboard event listener that will be attached to the body. */\n    this._keydownListener = event => {\n      const overlays = this._attachedOverlays;\n      for (let i = overlays.length - 1; i > -1; i--) {\n        // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n        // We want to target the most recent overlay, rather than trying to match where the event came\n        // from, because some components might open an overlay, but keep focus on a trigger element\n        // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n        // because we don't want overlays that don't handle keyboard events to block the ones below\n        // them that do.\n        if (overlays[i]._keydownEvents.observers.length > 0) {\n          const keydownEvents = overlays[i]._keydownEvents;\n          /** @breaking-change 14.0.0 _ngZone will be required. */\n          if (this._ngZone) {\n            this._ngZone.run(() => keydownEvents.next(event));\n          } else {\n            keydownEvents.next(event);\n          }\n          break;\n        }\n      }\n    };\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef) {\n    super.add(overlayRef);\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      /** @breaking-change 14.0.0 _ngZone will be required. */\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));\n      } else {\n        this._document.body.addEventListener('keydown', this._keydownListener);\n      }\n      this._isAttached = true;\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener);\n      this._isAttached = false;\n    }\n  }\n  static #_ = this.ɵfac = function OverlayKeyboardDispatcher_Factory(t) {\n    return new (t || OverlayKeyboardDispatcher)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i0.NgZone, 8));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OverlayKeyboardDispatcher,\n    factory: OverlayKeyboardDispatcher.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.NgZone,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n  constructor(document, _platform, /** @breaking-change 14.0.0 _ngZone will be required. */\n  _ngZone) {\n    super(document);\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._cursorStyleIsSet = false;\n    /** Store pointerdown event target to track origin of click. */\n    this._pointerDownListener = event => {\n      this._pointerDownEventTarget = _getEventTarget(event);\n    };\n    /** Click event listener that will be attached to the body propagate phase. */\n    this._clickListener = event => {\n      const target = _getEventTarget(event);\n      // In case of a click event, we want to check the origin of the click\n      // (e.g. in case where a user starts a click inside the overlay and\n      // releases the click outside of it).\n      // This is done by using the event target of the preceding pointerdown event.\n      // Every click event caused by a pointer device has a preceding pointerdown\n      // event, unless the click was programmatically triggered (e.g. in a unit test).\n      const origin = event.type === 'click' && this._pointerDownEventTarget ? this._pointerDownEventTarget : target;\n      // Reset the stored pointerdown event target, to avoid having it interfere\n      // in subsequent events.\n      this._pointerDownEventTarget = null;\n      // We copy the array because the original may be modified asynchronously if the\n      // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n      // the for loop.\n      const overlays = this._attachedOverlays.slice();\n      // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n      // We want to target all overlays for which the click could be considered as outside click.\n      // As soon as we reach an overlay for which the click is not outside click we break off\n      // the loop.\n      for (let i = overlays.length - 1; i > -1; i--) {\n        const overlayRef = overlays[i];\n        if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n          continue;\n        }\n        // If it's a click inside the overlay, just break - we should do nothing\n        // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n        // and proceed with the next overlay\n        if (overlayRef.overlayElement.contains(target) || overlayRef.overlayElement.contains(origin)) {\n          break;\n        }\n        const outsidePointerEvents = overlayRef._outsidePointerEvents;\n        /** @breaking-change 14.0.0 _ngZone will be required. */\n        if (this._ngZone) {\n          this._ngZone.run(() => outsidePointerEvents.next(event));\n        } else {\n          outsidePointerEvents.next(event);\n        }\n      }\n    };\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef) {\n    super.add(overlayRef);\n    // Safari on iOS does not generate click events for non-interactive\n    // elements. However, we want to receive a click for any element outside\n    // the overlay. We can force a \"clickable\" state by setting\n    // `cursor: pointer` on the document body. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n    // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n    if (!this._isAttached) {\n      const body = this._document.body;\n      /** @breaking-change 14.0.0 _ngZone will be required. */\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n      } else {\n        this._addEventListeners(body);\n      }\n      // click event is not fired on iOS. To make element \"clickable\" we are\n      // setting the cursor to pointer\n      if (this._platform.IOS && !this._cursorStyleIsSet) {\n        this._cursorOriginalValue = body.style.cursor;\n        body.style.cursor = 'pointer';\n        this._cursorStyleIsSet = true;\n      }\n      this._isAttached = true;\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  detach() {\n    if (this._isAttached) {\n      const body = this._document.body;\n      body.removeEventListener('pointerdown', this._pointerDownListener, true);\n      body.removeEventListener('click', this._clickListener, true);\n      body.removeEventListener('auxclick', this._clickListener, true);\n      body.removeEventListener('contextmenu', this._clickListener, true);\n      if (this._platform.IOS && this._cursorStyleIsSet) {\n        body.style.cursor = this._cursorOriginalValue;\n        this._cursorStyleIsSet = false;\n      }\n      this._isAttached = false;\n    }\n  }\n  _addEventListeners(body) {\n    body.addEventListener('pointerdown', this._pointerDownListener, true);\n    body.addEventListener('click', this._clickListener, true);\n    body.addEventListener('auxclick', this._clickListener, true);\n    body.addEventListener('contextmenu', this._clickListener, true);\n  }\n  static #_ = this.ɵfac = function OverlayOutsideClickDispatcher_Factory(t) {\n    return new (t || OverlayOutsideClickDispatcher)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1$1.Platform), i0.ɵɵinject(i0.NgZone, 8));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OverlayOutsideClickDispatcher,\n    factory: OverlayOutsideClickDispatcher.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayOutsideClickDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1$1.Platform\n    }, {\n      type: i0.NgZone,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n  constructor(document, _platform) {\n    this._platform = _platform;\n    this._document = document;\n  }\n  ngOnDestroy() {\n    this._containerElement?.remove();\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement() {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  _createContainer() {\n    const containerClass = 'cdk-overlay-container';\n    // TODO(crisbeto): remove the testing check once we have an overlay testing\n    // module or Angular starts tearing down the testing `NgModule`. See:\n    // https://github.com/angular/angular/issues/18831\n    if (this._platform.isBrowser || _isTestEnvironment()) {\n      const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n      // Remove any old containers from the opposite platform.\n      // This can happen when transitioning from the server to the client.\n      for (let i = 0; i < oppositePlatformContainers.length; i++) {\n        oppositePlatformContainers[i].remove();\n      }\n    }\n    const container = this._document.createElement('div');\n    container.classList.add(containerClass);\n    // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n    // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n    // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n    // To mitigate the problem we made it so that only containers from a different platform are\n    // cleared, but the side-effect was that people started depending on the overly-aggressive\n    // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n    // module which does the cleanup, we try to detect that we're in a test environment and we\n    // always clear the container. See #17006.\n    // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n    if (_isTestEnvironment()) {\n      container.setAttribute('platform', 'test');\n    } else if (!this._platform.isBrowser) {\n      container.setAttribute('platform', 'server');\n    }\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n  static #_ = this.ɵfac = function OverlayContainer_Factory(t) {\n    return new (t || OverlayContainer)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1$1.Platform));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OverlayContainer,\n    factory: OverlayContainer.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1$1.Platform\n    }];\n  }, null);\n})();\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n  constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher, _animationsDisabled = false) {\n    this._portalOutlet = _portalOutlet;\n    this._host = _host;\n    this._pane = _pane;\n    this._config = _config;\n    this._ngZone = _ngZone;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._document = _document;\n    this._location = _location;\n    this._outsideClickDispatcher = _outsideClickDispatcher;\n    this._animationsDisabled = _animationsDisabled;\n    this._backdropElement = null;\n    this._backdropClick = new Subject();\n    this._attachments = new Subject();\n    this._detachments = new Subject();\n    this._locationChanges = Subscription.EMPTY;\n    this._backdropClickHandler = event => this._backdropClick.next(event);\n    this._backdropTransitionendHandler = event => {\n      this._disposeBackdrop(event.target);\n    };\n    /** Stream of keydown events dispatched to this overlay. */\n    this._keydownEvents = new Subject();\n    /** Stream of mouse outside events dispatched to this overlay. */\n    this._outsidePointerEvents = new Subject();\n    if (_config.scrollStrategy) {\n      this._scrollStrategy = _config.scrollStrategy;\n      this._scrollStrategy.attach(this);\n    }\n    this._positionStrategy = _config.positionStrategy;\n  }\n\n  /** The overlay's HTML element */\n  get overlayElement() {\n    return this._pane;\n  }\n\n  /** The overlay's backdrop HTML element. */\n  get backdropElement() {\n    return this._backdropElement;\n  }\n\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n  get hostElement() {\n    return this._host;\n  }\n\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n  attach(portal) {\n    // Insert the host into the DOM before attaching the portal, otherwise\n    // the animations module will skip animations on repeat attachments.\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n    const attachResult = this._portalOutlet.attach(portal);\n    if (this._positionStrategy) {\n      this._positionStrategy.attach(this);\n    }\n    this._updateStackingOrder();\n    this._updateElementSize();\n    this._updateElementDirection();\n    if (this._scrollStrategy) {\n      this._scrollStrategy.enable();\n    }\n    // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n    this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      // The overlay could've been detached before the zone has stabilized.\n      if (this.hasAttached()) {\n        this.updatePosition();\n      }\n    });\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    }\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n    // Track this overlay by the keyboard dispatcher\n    this._keyboardDispatcher.add(this);\n    if (this._config.disposeOnNavigation) {\n      this._locationChanges = this._location.subscribe(() => this.dispose());\n    }\n    this._outsideClickDispatcher.add(this);\n    // TODO(crisbeto): the null check is here, because the portal outlet returns `any`.\n    // We should be guaranteed for the result to be `ComponentRef | EmbeddedViewRef`, but\n    // `instanceof EmbeddedViewRef` doesn't appear to work at the moment.\n    if (typeof attachResult?.onDestroy === 'function') {\n      // In most cases we control the portal and we know when it is being detached so that\n      // we can finish the disposal process. The exception is if the user passes in a custom\n      // `ViewContainerRef` that isn't destroyed through the overlay API. Note that we use\n      // `detach` here instead of `dispose`, because we don't know if the user intends to\n      // reattach the overlay at a later point. It also has the advantage of waiting for animations.\n      attachResult.onDestroy(() => {\n        if (this.hasAttached()) {\n          // We have to delay the `detach` call, because detaching immediately prevents\n          // other destroy hooks from running. This is likely a framework bug similar to\n          // https://github.com/angular/angular/issues/46119\n          this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => this.detach()));\n        }\n      });\n    }\n    return attachResult;\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n  detach() {\n    if (!this.hasAttached()) {\n      return;\n    }\n    this.detachBackdrop();\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n    if (this._positionStrategy && this._positionStrategy.detach) {\n      this._positionStrategy.detach();\n    }\n    if (this._scrollStrategy) {\n      this._scrollStrategy.disable();\n    }\n    const detachmentResult = this._portalOutlet.detach();\n    // Only emit after everything is detached.\n    this._detachments.next();\n    // Remove this overlay from keyboard dispatcher tracking.\n    this._keyboardDispatcher.remove(this);\n    // Keeping the host element in the DOM can cause scroll jank, because it still gets\n    // rendered, even though it's transparent and unclickable which is why we remove it.\n    this._detachContentWhenStable();\n    this._locationChanges.unsubscribe();\n    this._outsideClickDispatcher.remove(this);\n    return detachmentResult;\n  }\n\n  /** Cleans up the overlay from the DOM. */\n  dispose() {\n    const isAttached = this.hasAttached();\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n    this._disposeScrollStrategy();\n    this._disposeBackdrop(this._backdropElement);\n    this._locationChanges.unsubscribe();\n    this._keyboardDispatcher.remove(this);\n    this._portalOutlet.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._keydownEvents.complete();\n    this._outsidePointerEvents.complete();\n    this._outsideClickDispatcher.remove(this);\n    this._host?.remove();\n    this._previousHostParent = this._pane = this._host = null;\n    if (isAttached) {\n      this._detachments.next();\n    }\n    this._detachments.complete();\n  }\n\n  /** Whether the overlay has attached content. */\n  hasAttached() {\n    return this._portalOutlet.hasAttached();\n  }\n\n  /** Gets an observable that emits when the backdrop has been clicked. */\n  backdropClick() {\n    return this._backdropClick;\n  }\n\n  /** Gets an observable that emits when the overlay has been attached. */\n  attachments() {\n    return this._attachments;\n  }\n\n  /** Gets an observable that emits when the overlay has been detached. */\n  detachments() {\n    return this._detachments;\n  }\n\n  /** Gets an observable of keydown events targeted to this overlay. */\n  keydownEvents() {\n    return this._keydownEvents;\n  }\n\n  /** Gets an observable of pointer events targeted outside this overlay. */\n  outsidePointerEvents() {\n    return this._outsidePointerEvents;\n  }\n\n  /** Gets the current overlay configuration, which is immutable. */\n  getConfig() {\n    return this._config;\n  }\n\n  /** Updates the position of the overlay based on the position strategy. */\n  updatePosition() {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n\n  /** Switches to a new position strategy and updates the overlay position. */\n  updatePositionStrategy(strategy) {\n    if (strategy === this._positionStrategy) {\n      return;\n    }\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n    this._positionStrategy = strategy;\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      this.updatePosition();\n    }\n  }\n\n  /** Update the size properties of the overlay. */\n  updateSize(sizeConfig) {\n    this._config = {\n      ...this._config,\n      ...sizeConfig\n    };\n    this._updateElementSize();\n  }\n\n  /** Sets the LTR/RTL direction for the overlay. */\n  setDirection(dir) {\n    this._config = {\n      ...this._config,\n      direction: dir\n    };\n    this._updateElementDirection();\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes) {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, true);\n    }\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes) {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, false);\n    }\n  }\n\n  /**\n   * Returns the layout direction of the overlay panel.\n   */\n  getDirection() {\n    const direction = this._config.direction;\n    if (!direction) {\n      return 'ltr';\n    }\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n\n  /** Switches to a new scroll strategy. */\n  updateScrollStrategy(strategy) {\n    if (strategy === this._scrollStrategy) {\n      return;\n    }\n    this._disposeScrollStrategy();\n    this._scrollStrategy = strategy;\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      strategy.enable();\n    }\n  }\n\n  /** Updates the text direction of the overlay panel. */\n  _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n\n  /** Updates the size of the overlay element based on the overlay config. */\n  _updateElementSize() {\n    if (!this._pane) {\n      return;\n    }\n    const style = this._pane.style;\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n\n  /** Toggles the pointer events for the overlay pane element. */\n  _togglePointerEvents(enablePointer) {\n    this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n  }\n\n  /** Attaches a backdrop for this overlay. */\n  _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n    this._backdropElement = this._document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n    if (this._animationsDisabled) {\n      this._backdropElement.classList.add('cdk-overlay-backdrop-noop-animation');\n    }\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n    }\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._host.parentElement.insertBefore(this._backdropElement, this._host);\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', this._backdropClickHandler);\n    // Add class to fade-in the backdrop after one frame.\n    if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n  _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode.appendChild(this._host);\n    }\n  }\n\n  /** Detaches the backdrop (if any) associated with the overlay. */\n  detachBackdrop() {\n    const backdropToDetach = this._backdropElement;\n    if (!backdropToDetach) {\n      return;\n    }\n    if (this._animationsDisabled) {\n      this._disposeBackdrop(backdropToDetach);\n      return;\n    }\n    backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n    this._ngZone.runOutsideAngular(() => {\n      backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);\n    });\n    // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n    // In this case we make it unclickable and we try to remove it after a delay.\n    backdropToDetach.style.pointerEvents = 'none';\n    // Run this outside the Angular zone because there's nothing that Angular cares about.\n    // If it were to run inside the Angular zone, every test that used Overlay would have to be\n    // either async or fakeAsync.\n    this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n      this._disposeBackdrop(backdropToDetach);\n    }, 500));\n  }\n\n  /** Toggles a single CSS class or an array of classes on an element. */\n  _toggleClasses(element, cssClasses, isAdd) {\n    const classes = coerceArray(cssClasses || []).filter(c => !!c);\n    if (classes.length) {\n      isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n    }\n  }\n\n  /** Detaches the overlay content next time the zone stabilizes. */\n  _detachContentWhenStable() {\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n    // be patched to run inside the zone, which will throw us into an infinite loop.\n    this._ngZone.runOutsideAngular(() => {\n      // We can't remove the host here immediately, because the overlay pane's content\n      // might still be animating. This stream helps us avoid interrupting the animation\n      // by waiting for the pane to become empty.\n      const subscription = this._ngZone.onStable.pipe(takeUntil(merge(this._attachments, this._detachments))).subscribe(() => {\n        // Needs a couple of checks for the pane and host, because\n        // they may have been removed by the time the zone stabilizes.\n        if (!this._pane || !this._host || this._pane.children.length === 0) {\n          if (this._pane && this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, false);\n          }\n          if (this._host && this._host.parentElement) {\n            this._previousHostParent = this._host.parentElement;\n            this._host.remove();\n          }\n          subscription.unsubscribe();\n        }\n      });\n    });\n  }\n\n  /** Disposes of a scroll strategy. */\n  _disposeScrollStrategy() {\n    const scrollStrategy = this._scrollStrategy;\n    if (scrollStrategy) {\n      scrollStrategy.disable();\n      if (scrollStrategy.detach) {\n        scrollStrategy.detach();\n      }\n    }\n  }\n\n  /** Removes a backdrop element from the DOM. */\n  _disposeBackdrop(backdrop) {\n    if (backdrop) {\n      backdrop.removeEventListener('click', this._backdropClickHandler);\n      backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n      backdrop.remove();\n      // It is possible that a new portal has been attached to this overlay since we started\n      // removing the backdrop. If that is the case, only clear the backdrop reference if it\n      // is still the same instance that we started to remove.\n      if (this._backdropElement === backdrop) {\n        this._backdropElement = null;\n      }\n    }\n    if (this._backdropTimeout) {\n      clearTimeout(this._backdropTimeout);\n      this._backdropTimeout = undefined;\n    }\n  }\n}\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions() {\n    return this._preferredPositions;\n  }\n  constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n    /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n    this._lastBoundingBoxSize = {\n      width: 0,\n      height: 0\n    };\n    /** Whether the overlay was pushed in a previous positioning. */\n    this._isPushed = false;\n    /** Whether the overlay can be pushed on-screen on the initial open. */\n    this._canPush = true;\n    /** Whether the overlay can grow via flexible width/height after the initial open. */\n    this._growAfterOpen = false;\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    this._hasFlexibleDimensions = true;\n    /** Whether the overlay position is locked. */\n    this._positionLocked = false;\n    /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n    this._viewportMargin = 0;\n    /** The Scrollable containers used to check scrollable view properties on position change. */\n    this._scrollables = [];\n    /** Ordered list of preferred positions, from most to least desirable. */\n    this._preferredPositions = [];\n    /** Subject that emits whenever the position changes. */\n    this._positionChanges = new Subject();\n    /** Subscription to viewport size changes. */\n    this._resizeSubscription = Subscription.EMPTY;\n    /** Default offset for the overlay along the x axis. */\n    this._offsetX = 0;\n    /** Default offset for the overlay along the y axis. */\n    this._offsetY = 0;\n    /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n    this._appliedPanelClasses = [];\n    /** Observable sequence of position changes. */\n    this.positionChanges = this._positionChanges;\n    this.setOrigin(connectedTo);\n  }\n\n  /** Attaches this position strategy to an overlay. */\n  attach(overlayRef) {\n    if (this._overlayRef && overlayRef !== this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n    this._validatePositions();\n    overlayRef.hostElement.classList.add(boundingBoxClass);\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._isDisposed = false;\n    this._isInitialRender = true;\n    this._lastPosition = null;\n    this._resizeSubscription.unsubscribe();\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n      // When the window is resized, we want to trigger the next reposition as if it\n      // was an initial render, in order for the strategy to pick a new optimal position,\n      // otherwise position locking will cause it to stay at the old one.\n      this._isInitialRender = true;\n      this.apply();\n    });\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n  apply() {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    }\n    // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n    this._clearPanelClasses();\n    this._resetOverlayElementStyles();\n    this._resetBoundingBoxStyles();\n    // We need the bounding rects for the origin, the overlay and the container to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._getOriginRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n    this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect;\n    const containerRect = this._containerRect;\n    // Positions where the overlay will fit with flexible dimensions.\n    const flexibleFits = [];\n    // Fallback if none of the preferred positions fit within the viewport.\n    let fallback;\n    // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n      // Calculate how well the overlay would fit into the viewport with this point.\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n      // If the overlay, without any further work, fits into the viewport, use this position.\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n        this._applyPosition(pos, originPoint);\n        return;\n      }\n      // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n        });\n        continue;\n      }\n      // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {\n          overlayFit,\n          overlayPoint,\n          originPoint,\n          position: pos,\n          overlayRect\n        };\n      }\n    }\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n    if (flexibleFits.length) {\n      let bestFit = null;\n      let bestScore = -1;\n      for (const fit of flexibleFits) {\n        const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n      this._isPushed = false;\n      this._applyPosition(bestFit.position, bestFit.origin);\n      return;\n    }\n    // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n      this._applyPosition(fallback.position, fallback.originPoint);\n      return;\n    }\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n    this._applyPosition(fallback.position, fallback.originPoint);\n  }\n  detach() {\n    this._clearPanelClasses();\n    this._lastPosition = null;\n    this._previousPushAmount = null;\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /** Cleanup after the element gets destroyed. */\n  dispose() {\n    if (this._isDisposed) {\n      return;\n    }\n    // We can't use `_resetBoundingBoxStyles` here, because it resets\n    // some properties to zero, rather than removing them.\n    if (this._boundingBox) {\n      extendStyles(this._boundingBox.style, {\n        top: '',\n        left: '',\n        right: '',\n        bottom: '',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: ''\n      });\n    }\n    if (this._pane) {\n      this._resetOverlayElementStyles();\n    }\n    if (this._overlayRef) {\n      this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n    }\n    this.detach();\n    this._positionChanges.complete();\n    this._overlayRef = this._boundingBox = null;\n    this._isDisposed = true;\n  }\n\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  reapplyLastPosition() {\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    }\n    const lastPosition = this._lastPosition;\n    if (lastPosition) {\n      this._originRect = this._getOriginRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n      this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n      const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n      this._applyPosition(lastPosition, originPoint);\n    } else {\n      this.apply();\n    }\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables) {\n    this._scrollables = scrollables;\n    return this;\n  }\n\n  /**\n   * Adds new preferred positions.\n   * @param positions List of positions options for this overlay.\n   */\n  withPositions(positions) {\n    this._preferredPositions = positions;\n    // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n    if (positions.indexOf(this._lastPosition) === -1) {\n      this._lastPosition = null;\n    }\n    this._validatePositions();\n    return this;\n  }\n\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n  withViewportMargin(margin) {\n    this._viewportMargin = margin;\n    return this;\n  }\n\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n  withFlexibleDimensions(flexibleDimensions = true) {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n  withGrowAfterOpen(growAfterOpen = true) {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  withPush(canPush = true) {\n    this._canPush = canPush;\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked = true) {\n    this._positionLocked = isLocked;\n    return this;\n  }\n\n  /**\n   * Sets the origin, relative to which to position the overlay.\n   * Using an element origin is useful for building components that need to be positioned\n   * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n   * used for cases like contextual menus which open relative to the user's pointer.\n   * @param origin Reference to the new origin.\n   */\n  setOrigin(origin) {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n  withDefaultOffsetX(offset) {\n    this._offsetX = offset;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n  withDefaultOffsetY(offset) {\n    this._offsetY = offset;\n    return this;\n  }\n\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   */\n  withTransformOriginOn(selector) {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n  _getOriginPoint(originRect, containerRect, pos) {\n    let x;\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + originRect.width / 2;\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n    // When zooming in Safari the container rectangle contains negative values for the position\n    // and we need to re-add them to the calculated coordinates.\n    if (containerRect.left < 0) {\n      x -= containerRect.left;\n    }\n    let y;\n    if (pos.originY == 'center') {\n      y = originRect.top + originRect.height / 2;\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n    // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n    // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n    // Additionally, when zooming in Safari this fixes the vertical position.\n    if (containerRect.top < 0) {\n      y -= containerRect.top;\n    }\n    return {\n      x,\n      y\n    };\n  }\n\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n  _getOverlayPoint(originPoint, overlayRect, pos) {\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n    let overlayStartY;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n    // The (x, y) coordinates of the overlay.\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY\n    };\n  }\n\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n  _getOverlayFit(point, rawOverlayRect, viewport, position) {\n    // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    let {\n      x,\n      y\n    } = point;\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n    // Account for the offsets since they could push the overlay out of the viewport.\n    if (offsetX) {\n      x += offsetX;\n    }\n    if (offsetY) {\n      y += offsetY;\n    }\n    // How much the overlay would overflow at this position, on each side.\n    let leftOverflow = 0 - x;\n    let rightOverflow = x + overlay.width - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = y + overlay.height - viewport.height;\n    // Visible parts of the element on each axis.\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n    let visibleArea = visibleWidth * visibleHeight;\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width\n    };\n  }\n\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlay at some position.\n   * @param viewport The geometry of the viewport.\n   */\n  _canFitWithFlexibleDimensions(fit, point, viewport) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n      const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n      const verticalFit = fit.fitsInViewportVertically || minHeight != null && minHeight <= availableHeight;\n      const horizontalFit = fit.fitsInViewportHorizontally || minWidth != null && minWidth <= availableWidth;\n      return verticalFit && horizontalFit;\n    }\n    return false;\n  }\n\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the\n   * right and bottom).\n   *\n   * @param start Starting point from which the overlay is pushed.\n   * @param rawOverlayRect Dimensions of the overlay.\n   * @param scrollPosition Current viewport scroll position.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n  _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\n    if (this._previousPushAmount && this._positionLocked) {\n      return {\n        x: start.x + this._previousPushAmount.x,\n        y: start.y + this._previousPushAmount.y\n      };\n    }\n    // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    const viewport = this._viewportRect;\n    // Determine how much the overlay goes outside the viewport on each\n    // side, which we'll use to decide which direction to push it.\n    const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n    // Amount by which to push the overlay in each axis such that it remains on-screen.\n    let pushX = 0;\n    let pushY = 0;\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n    if (overlay.width <= viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n    }\n    if (overlay.height <= viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n    }\n    this._previousPushAmount = {\n      x: pushX,\n      y: pushY\n    };\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY\n    };\n  }\n\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n  _applyPosition(position, originPoint) {\n    this._setTransformOrigin(position);\n    this._setOverlayElementStyles(originPoint, position);\n    this._setBoundingBoxStyles(originPoint, position);\n    if (position.panelClass) {\n      this._addPanelClasses(position.panelClass);\n    }\n    // Save the last connected position in case the position needs to be re-calculated.\n    this._lastPosition = position;\n    // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculations can be somewhat expensive.\n    if (this._positionChanges.observers.length) {\n      const scrollableViewProperties = this._getScrollVisibility();\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n      this._positionChanges.next(changeEvent);\n    }\n    this._isInitialRender = false;\n  }\n\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\n  _setTransformOrigin(position) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n    const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n    let xOrigin;\n    let yOrigin = position.overlayY;\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n  _calculateBoundingBoxRect(origin, position) {\n    const viewport = this._viewportRect;\n    const isRtl = this._isRtl();\n    let height, top, bottom;\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.height - top + this._viewportMargin;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay is vertically centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n      // `origin.y - viewport.top`.\n      const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n      const previousHeight = this._lastBoundingBoxSize.height;\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - previousHeight / 2;\n      }\n    }\n    // The overlay is opening 'right-ward' (the content flows to the right).\n    const isBoundedByRightViewportEdge = position.overlayX === 'start' && !isRtl || position.overlayX === 'end' && isRtl;\n    // The overlay is opening 'left-ward' (the content flows to the left).\n    const isBoundedByLeftViewportEdge = position.overlayX === 'end' && !isRtl || position.overlayX === 'start' && isRtl;\n    let width, left, right;\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.width - origin.x + this._viewportMargin;\n      width = origin.x - this._viewportMargin;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay is horizontally centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.right - origin.x` and\n      // `origin.x - viewport.left`.\n      const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n      const previousWidth = this._lastBoundingBoxSize.width;\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - previousWidth / 2;\n      }\n    }\n    return {\n      top: top,\n      left: left,\n      bottom: bottom,\n      right: right,\n      width,\n      height\n    };\n  }\n\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stretches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n  _setBoundingBoxStyles(origin, position) {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n    const styles = {};\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\n      // Push the pane content towards the proper direction.\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n    this._lastBoundingBoxSize = boundingBoxRect;\n    extendStyles(this._boundingBox.style, styles);\n  }\n\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n  _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: ''\n    });\n  }\n\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n  _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n      transform: ''\n    });\n  }\n\n  /** Sets positioning styles to the overlay element. */\n  _setOverlayElementStyles(originPoint, position) {\n    const styles = {};\n    const hasExactPosition = this._hasExactPosition();\n    const hasFlexibleDimensions = this._hasFlexibleDimensions;\n    const config = this._overlayRef.getConfig();\n    if (hasExactPosition) {\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n    } else {\n      styles.position = 'static';\n    }\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n    let transformString = '';\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n    styles.transform = transformString.trim();\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    // Note that this doesn't apply when we have an exact position, in which case we do want to\n    // apply them because they'll be cleared from the bounding box.\n    if (config.maxHeight) {\n      if (hasExactPosition) {\n        styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n      } else if (hasFlexibleDimensions) {\n        styles.maxHeight = '';\n      }\n    }\n    if (config.maxWidth) {\n      if (hasExactPosition) {\n        styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n      } else if (hasFlexibleDimensions) {\n        styles.maxWidth = '';\n      }\n    }\n    extendStyles(this._pane.style, styles);\n  }\n\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n  _getExactOverlayY(position, originPoint, scrollPosition) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {\n      top: '',\n      bottom: ''\n    };\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n    return styles;\n  }\n\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n  _getExactOverlayX(position, originPoint, scrollPosition) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {\n      left: '',\n      right: ''\n    };\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let horizontalStyleProperty;\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    }\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n    return styles;\n  }\n\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n  _getScrollVisibility() {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._getOriginRect();\n    const overlayBounds = this._pane.getBoundingClientRect();\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n    const scrollContainerBounds = this._scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)\n    };\n  }\n\n  /** Subtracts the amount that an element is overflowing on an axis from its length. */\n  _subtractOverflows(length, ...overflows) {\n    return overflows.reduce((currentValue, currentOverflow) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n  _getNarrowedViewportRect() {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement.clientWidth;\n    const height = this._document.documentElement.clientHeight;\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n    return {\n      top: scrollPosition.top + this._viewportMargin,\n      left: scrollPosition.left + this._viewportMargin,\n      right: scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width: width - 2 * this._viewportMargin,\n      height: height - 2 * this._viewportMargin\n    };\n  }\n\n  /** Whether the we're dealing with an RTL context */\n  _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Determines whether the overlay uses exact or flexible positioning. */\n  _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n\n  /** Retrieves the offset of a position along the x or y axis. */\n  _getOffset(position, axis) {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breaking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n\n  /** Validates that the current position match the expected values. */\n  _validatePositions() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._preferredPositions.length) {\n        throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n      }\n      // TODO(crisbeto): remove these once Angular's template type\n      // checking is advanced enough to catch these cases.\n      this._preferredPositions.forEach(pair => {\n        validateHorizontalPosition('originX', pair.originX);\n        validateVerticalPosition('originY', pair.originY);\n        validateHorizontalPosition('overlayX', pair.overlayX);\n        validateVerticalPosition('overlayY', pair.overlayY);\n      });\n    }\n  }\n\n  /** Adds a single CSS class or an array of classes on the overlay panel. */\n  _addPanelClasses(cssClasses) {\n    if (this._pane) {\n      coerceArray(cssClasses).forEach(cssClass => {\n        if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n          this._appliedPanelClasses.push(cssClass);\n          this._pane.classList.add(cssClass);\n        }\n      });\n    }\n  }\n\n  /** Clears the classes that the position strategy has applied from the overlay panel. */\n  _clearPanelClasses() {\n    if (this._pane) {\n      this._appliedPanelClasses.forEach(cssClass => {\n        this._pane.classList.remove(cssClass);\n      });\n      this._appliedPanelClasses = [];\n    }\n  }\n\n  /** Returns the ClientRect of the current origin. */\n  _getOriginRect() {\n    const origin = this._origin;\n    if (origin instanceof ElementRef) {\n      return origin.nativeElement.getBoundingClientRect();\n    }\n    // Check for Element so SVG elements are also supported.\n    if (origin instanceof Element) {\n      return origin.getBoundingClientRect();\n    }\n    const width = origin.width || 0;\n    const height = origin.height || 0;\n    // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n    return {\n      top: origin.y,\n      bottom: origin.y + height,\n      left: origin.x,\n      right: origin.x + width,\n      height,\n      width\n    };\n  }\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      destination[key] = source[key];\n    }\n  }\n  return destination;\n}\n\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n  if (typeof input !== 'number' && input != null) {\n    const [value, units] = input.split(cssUnitPattern);\n    return !units || units === 'px' ? parseFloat(value) : null;\n  }\n  return input || null;\n}\n\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n  return {\n    top: Math.floor(clientRect.top),\n    right: Math.floor(clientRect.right),\n    bottom: Math.floor(clientRect.bottom),\n    left: Math.floor(clientRect.left),\n    width: Math.floor(clientRect.width),\n    height: Math.floor(clientRect.height)\n  };\n}\nconst STANDARD_DROPDOWN_BELOW_POSITIONS = [{\n  originX: 'start',\n  originY: 'bottom',\n  overlayX: 'start',\n  overlayY: 'top'\n}, {\n  originX: 'start',\n  originY: 'top',\n  overlayX: 'start',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'bottom',\n  overlayX: 'end',\n  overlayY: 'top'\n}, {\n  originX: 'end',\n  originY: 'top',\n  overlayX: 'end',\n  overlayY: 'bottom'\n}];\nconst STANDARD_DROPDOWN_ADJACENT_POSITIONS = [{\n  originX: 'end',\n  originY: 'top',\n  overlayX: 'start',\n  overlayY: 'top'\n}, {\n  originX: 'end',\n  originY: 'bottom',\n  overlayX: 'start',\n  overlayY: 'bottom'\n}, {\n  originX: 'start',\n  originY: 'top',\n  overlayX: 'end',\n  overlayY: 'top'\n}, {\n  originX: 'start',\n  originY: 'bottom',\n  overlayX: 'end',\n  overlayY: 'bottom'\n}];\n\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n  constructor() {\n    this._cssPosition = 'static';\n    this._topOffset = '';\n    this._bottomOffset = '';\n    this._alignItems = '';\n    this._xPosition = '';\n    this._xOffset = '';\n    this._width = '';\n    this._height = '';\n    this._isDisposed = false;\n  }\n  attach(overlayRef) {\n    const config = overlayRef.getConfig();\n    this._overlayRef = overlayRef;\n    if (this._width && !config.width) {\n      overlayRef.updateSize({\n        width: this._width\n      });\n    }\n    if (this._height && !config.height) {\n      overlayRef.updateSize({\n        height: this._height\n      });\n    }\n    overlayRef.hostElement.classList.add(wrapperClass);\n    this._isDisposed = false;\n  }\n\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n  top(value = '') {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n  left(value = '') {\n    this._xOffset = value;\n    this._xPosition = 'left';\n    return this;\n  }\n\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n  bottom(value = '') {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n  right(value = '') {\n    this._xOffset = value;\n    this._xPosition = 'right';\n    return this;\n  }\n\n  /**\n   * Sets the overlay to the start of the viewport, depending on the overlay direction.\n   * This will be to the left in LTR layouts and to the right in RTL.\n   * @param offset Offset from the edge of the screen.\n   */\n  start(value = '') {\n    this._xOffset = value;\n    this._xPosition = 'start';\n    return this;\n  }\n\n  /**\n   * Sets the overlay to the end of the viewport, depending on the overlay direction.\n   * This will be to the right in LTR layouts and to the left in RTL.\n   * @param offset Offset from the edge of the screen.\n   */\n  end(value = '') {\n    this._xOffset = value;\n    this._xPosition = 'end';\n    return this;\n  }\n\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  width(value = '') {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({\n        width: value\n      });\n    } else {\n      this._width = value;\n    }\n    return this;\n  }\n\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  height(value = '') {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({\n        height: value\n      });\n    } else {\n      this._height = value;\n    }\n    return this;\n  }\n\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n  centerHorizontally(offset = '') {\n    this.left(offset);\n    this._xPosition = 'center';\n    return this;\n  }\n\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n  centerVertically(offset = '') {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n  apply() {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      return;\n    }\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n    const config = this._overlayRef.getConfig();\n    const {\n      width,\n      height,\n      maxWidth,\n      maxHeight\n    } = config;\n    const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') && (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n    const shouldBeFlushVertically = (height === '100%' || height === '100vh') && (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n    const xPosition = this._xPosition;\n    const xOffset = this._xOffset;\n    const isRtl = this._overlayRef.getConfig().direction === 'rtl';\n    let marginLeft = '';\n    let marginRight = '';\n    let justifyContent = '';\n    if (shouldBeFlushHorizontally) {\n      justifyContent = 'flex-start';\n    } else if (xPosition === 'center') {\n      justifyContent = 'center';\n      if (isRtl) {\n        marginRight = xOffset;\n      } else {\n        marginLeft = xOffset;\n      }\n    } else if (isRtl) {\n      if (xPosition === 'left' || xPosition === 'end') {\n        justifyContent = 'flex-end';\n        marginLeft = xOffset;\n      } else if (xPosition === 'right' || xPosition === 'start') {\n        justifyContent = 'flex-start';\n        marginRight = xOffset;\n      }\n    } else if (xPosition === 'left' || xPosition === 'start') {\n      justifyContent = 'flex-start';\n      marginLeft = xOffset;\n    } else if (xPosition === 'right' || xPosition === 'end') {\n      justifyContent = 'flex-end';\n      marginRight = xOffset;\n    }\n    styles.position = this._cssPosition;\n    styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;\n    styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;\n    parentStyles.justifyContent = justifyContent;\n    parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n  }\n\n  /**\n   * Cleans up the DOM changes from the position strategy.\n   * @docs-private\n   */\n  dispose() {\n    if (this._isDisposed || !this._overlayRef) {\n      return;\n    }\n    const styles = this._overlayRef.overlayElement.style;\n    const parent = this._overlayRef.hostElement;\n    const parentStyles = parent.style;\n    parent.classList.remove(wrapperClass);\n    parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop = styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n    this._overlayRef = null;\n    this._isDisposed = true;\n  }\n}\n\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n  constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n  }\n\n  /**\n   * Creates a global position strategy.\n   */\n  global() {\n    return new GlobalPositionStrategy();\n  }\n\n  /**\n   * Creates a flexible position strategy.\n   * @param origin Origin relative to which to position the overlay.\n   */\n  flexibleConnectedTo(origin) {\n    return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n  }\n  static #_ = this.ɵfac = function OverlayPositionBuilder_Factory(t) {\n    return new (t || OverlayPositionBuilder)(i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1$1.Platform), i0.ɵɵinject(OverlayContainer));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OverlayPositionBuilder,\n    factory: OverlayPositionBuilder.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1$1.Platform\n    }, {\n      type: OverlayContainer\n    }];\n  }, null);\n})();\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n  constructor( /** Scrolling strategies that can be used when creating an overlay. */\n  scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher, _animationsModuleType) {\n    this.scrollStrategies = scrollStrategies;\n    this._overlayContainer = _overlayContainer;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._positionBuilder = _positionBuilder;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._injector = _injector;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._directionality = _directionality;\n    this._location = _location;\n    this._outsideClickDispatcher = _outsideClickDispatcher;\n    this._animationsModuleType = _animationsModuleType;\n  }\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config) {\n    const host = this._createHostElement();\n    const pane = this._createPaneElement(host);\n    const portalOutlet = this._createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher, this._animationsModuleType === 'NoopAnimations');\n  }\n\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n  position() {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  _createPaneElement(host) {\n    const pane = this._document.createElement('div');\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  _createHostElement() {\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  _createPortalOutlet(pane) {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get(ApplicationRef);\n    }\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n  }\n  static #_ = this.ɵfac = function Overlay_Factory(t) {\n    return new (t || Overlay)(i0.ɵɵinject(ScrollStrategyOptions), i0.ɵɵinject(OverlayContainer), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(OverlayPositionBuilder), i0.ɵɵinject(OverlayKeyboardDispatcher), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i5.Directionality), i0.ɵɵinject(i6.Location), i0.ɵɵinject(OverlayOutsideClickDispatcher), i0.ɵɵinject(ANIMATION_MODULE_TYPE, 8));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Overlay,\n    factory: Overlay.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Overlay, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ScrollStrategyOptions\n    }, {\n      type: OverlayContainer\n    }, {\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: OverlayPositionBuilder\n    }, {\n      type: OverlayKeyboardDispatcher\n    }, {\n      type: i0.Injector\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i5.Directionality\n    }, {\n      type: i6.Location\n    }, {\n      type: OverlayOutsideClickDispatcher\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [{\n  originX: 'start',\n  originY: 'bottom',\n  overlayX: 'start',\n  overlayY: 'top'\n}, {\n  originX: 'start',\n  originY: 'top',\n  overlayX: 'start',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'top',\n  overlayX: 'end',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'bottom',\n  overlayX: 'end',\n  overlayY: 'top'\n}];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n  constructor( /** Reference to the element on which the directive is applied. */\n  elementRef) {\n    this.elementRef = elementRef;\n  }\n  static #_ = this.ɵfac = function CdkOverlayOrigin_Factory(t) {\n    return new (t || CdkOverlayOrigin)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkOverlayOrigin,\n    selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]],\n    exportAs: [\"cdkOverlayOrigin\"],\n    standalone: true\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n      exportAs: 'cdkOverlayOrigin',\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n  /** The offset in pixels for the overlay connection point on the x-axis */\n  get offsetX() {\n    return this._offsetX;\n  }\n  set offsetX(offsetX) {\n    this._offsetX = offsetX;\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The offset in pixels for the overlay connection point on the y-axis */\n  get offsetY() {\n    return this._offsetY;\n  }\n  set offsetY(offsetY) {\n    this._offsetY = offsetY;\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** Whether or not the overlay should attach a backdrop. */\n  get hasBackdrop() {\n    return this._hasBackdrop;\n  }\n  set hasBackdrop(value) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n\n  /** Whether or not the overlay should be locked when scrolling. */\n  get lockPosition() {\n    return this._lockPosition;\n  }\n  set lockPosition(value) {\n    this._lockPosition = coerceBooleanProperty(value);\n  }\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  get flexibleDimensions() {\n    return this._flexibleDimensions;\n  }\n  set flexibleDimensions(value) {\n    this._flexibleDimensions = coerceBooleanProperty(value);\n  }\n\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n  get growAfterOpen() {\n    return this._growAfterOpen;\n  }\n  set growAfterOpen(value) {\n    this._growAfterOpen = coerceBooleanProperty(value);\n  }\n\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  get push() {\n    return this._push;\n  }\n  set push(value) {\n    this._push = coerceBooleanProperty(value);\n  }\n\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n  constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n    this._overlay = _overlay;\n    this._dir = _dir;\n    this._hasBackdrop = false;\n    this._lockPosition = false;\n    this._growAfterOpen = false;\n    this._flexibleDimensions = false;\n    this._push = false;\n    this._backdropSubscription = Subscription.EMPTY;\n    this._attachSubscription = Subscription.EMPTY;\n    this._detachSubscription = Subscription.EMPTY;\n    this._positionSubscription = Subscription.EMPTY;\n    /** Margin between the overlay and the viewport edges. */\n    this.viewportMargin = 0;\n    /** Whether the overlay is open. */\n    this.open = false;\n    /** Whether the overlay can be closed by user interaction. */\n    this.disableClose = false;\n    /** Event emitted when the backdrop is clicked. */\n    this.backdropClick = new EventEmitter();\n    /** Event emitted when the position has changed. */\n    this.positionChange = new EventEmitter();\n    /** Event emitted when the overlay has been attached. */\n    this.attach = new EventEmitter();\n    /** Event emitted when the overlay has been detached. */\n    this.detach = new EventEmitter();\n    /** Emits when there are keyboard events that are targeted at the overlay. */\n    this.overlayKeydown = new EventEmitter();\n    /** Emits when there are mouse outside click events that are targeted at the overlay. */\n    this.overlayOutsideClick = new EventEmitter();\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n\n  /** The associated overlay reference. */\n  get overlayRef() {\n    return this._overlayRef;\n  }\n\n  /** The element's layout direction. */\n  get dir() {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n  ngOnDestroy() {\n    this._attachSubscription.unsubscribe();\n    this._detachSubscription.unsubscribe();\n    this._backdropSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n  }\n  ngOnChanges(changes) {\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight\n      });\n      if (changes['origin'] && this.open) {\n        this._position.apply();\n      }\n    }\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n\n  /** Creates an overlay */\n  _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n    const overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\n    this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n    this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n    overlayRef.keydownEvents().subscribe(event => {\n      this.overlayKeydown.next(event);\n      if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n        event.preventDefault();\n        this._detachOverlay();\n      }\n    });\n    this._overlayRef.outsidePointerEvents().subscribe(event => {\n      this.overlayOutsideClick.next(event);\n    });\n  }\n\n  /** Builds the overlay config based on the directive's inputs */\n  _buildConfig() {\n    const positionStrategy = this._position = this.positionStrategy || this._createPositionStrategy();\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir,\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop\n    });\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n    if (this.panelClass) {\n      overlayConfig.panelClass = this.panelClass;\n    }\n    return overlayConfig;\n  }\n\n  /** Updates the state of a position strategy, based on the values of the directive inputs. */\n  _updatePositionStrategy(positionStrategy) {\n    const positions = this.positions.map(currentPosition => ({\n      originX: currentPosition.originX,\n      originY: currentPosition.originY,\n      overlayX: currentPosition.overlayX,\n      overlayY: currentPosition.overlayY,\n      offsetX: currentPosition.offsetX || this.offsetX,\n      offsetY: currentPosition.offsetY || this.offsetY,\n      panelClass: currentPosition.panelClass || undefined\n    }));\n    return positionStrategy.setOrigin(this._getFlexibleConnectedPositionStrategyOrigin()).withPositions(positions).withFlexibleDimensions(this.flexibleDimensions).withPush(this.push).withGrowAfterOpen(this.growAfterOpen).withViewportMargin(this.viewportMargin).withLockedPosition(this.lockPosition).withTransformOriginOn(this.transformOriginSelector);\n  }\n\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n  _createPositionStrategy() {\n    const strategy = this._overlay.position().flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n    this._updatePositionStrategy(strategy);\n    return strategy;\n  }\n  _getFlexibleConnectedPositionStrategyOrigin() {\n    if (this.origin instanceof CdkOverlayOrigin) {\n      return this.origin.elementRef;\n    } else {\n      return this.origin;\n    }\n  }\n\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n  _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n    }\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n    }\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    } else {\n      this._backdropSubscription.unsubscribe();\n    }\n    this._positionSubscription.unsubscribe();\n    // Only subscribe to `positionChanges` if requested, because putting\n    // together all the information for it can be expensive.\n    if (this.positionChange.observers.length > 0) {\n      this._positionSubscription = this._position.positionChanges.pipe(takeWhile(() => this.positionChange.observers.length > 0)).subscribe(position => {\n        this.positionChange.emit(position);\n        if (this.positionChange.observers.length === 0) {\n          this._positionSubscription.unsubscribe();\n        }\n      });\n    }\n  }\n\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n  _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n    }\n    this._backdropSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n  }\n  static #_ = this.ɵfac = function CdkConnectedOverlay_Factory(t) {\n    return new (t || CdkConnectedOverlay)(i0.ɵɵdirectiveInject(Overlay), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(i5.Directionality, 8));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkConnectedOverlay,\n    selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]],\n    inputs: {\n      origin: [\"cdkConnectedOverlayOrigin\", \"origin\"],\n      positions: [\"cdkConnectedOverlayPositions\", \"positions\"],\n      positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"],\n      offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"],\n      offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"],\n      width: [\"cdkConnectedOverlayWidth\", \"width\"],\n      height: [\"cdkConnectedOverlayHeight\", \"height\"],\n      minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"],\n      minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"],\n      backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"],\n      panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"],\n      viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"],\n      scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"],\n      open: [\"cdkConnectedOverlayOpen\", \"open\"],\n      disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"],\n      transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"],\n      hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"],\n      lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"],\n      flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"],\n      growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"],\n      push: [\"cdkConnectedOverlayPush\", \"push\"]\n    },\n    outputs: {\n      backdropClick: \"backdropClick\",\n      positionChange: \"positionChange\",\n      attach: \"attach\",\n      detach: \"detach\",\n      overlayKeydown: \"overlayKeydown\",\n      overlayOutsideClick: \"overlayOutsideClick\"\n    },\n    exportAs: [\"cdkConnectedOverlay\"],\n    standalone: true,\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n      exportAs: 'cdkConnectedOverlay',\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: Overlay\n    }, {\n      type: i0.TemplateRef\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: i5.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    origin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOrigin']\n    }],\n    positions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPositions']\n    }],\n    positionStrategy: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPositionStrategy']\n    }],\n    offsetX: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetX']\n    }],\n    offsetY: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetY']\n    }],\n    width: [{\n      type: Input,\n      args: ['cdkConnectedOverlayWidth']\n    }],\n    height: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHeight']\n    }],\n    minWidth: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinWidth']\n    }],\n    minHeight: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinHeight']\n    }],\n    backdropClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayBackdropClass']\n    }],\n    panelClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPanelClass']\n    }],\n    viewportMargin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayViewportMargin']\n    }],\n    scrollStrategy: [{\n      type: Input,\n      args: ['cdkConnectedOverlayScrollStrategy']\n    }],\n    open: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOpen']\n    }],\n    disableClose: [{\n      type: Input,\n      args: ['cdkConnectedOverlayDisableClose']\n    }],\n    transformOriginSelector: [{\n      type: Input,\n      args: ['cdkConnectedOverlayTransformOriginOn']\n    }],\n    hasBackdrop: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHasBackdrop']\n    }],\n    lockPosition: [{\n      type: Input,\n      args: ['cdkConnectedOverlayLockPosition']\n    }],\n    flexibleDimensions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayFlexibleDimensions']\n    }],\n    growAfterOpen: [{\n      type: Input,\n      args: ['cdkConnectedOverlayGrowAfterOpen']\n    }],\n    push: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPush']\n    }],\n    backdropClick: [{\n      type: Output\n    }],\n    positionChange: [{\n      type: Output\n    }],\n    attach: [{\n      type: Output\n    }],\n    detach: [{\n      type: Output\n    }],\n    overlayKeydown: [{\n      type: Output\n    }],\n    overlayOutsideClick: [{\n      type: Output\n    }]\n  });\n})();\n\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\nclass OverlayModule {\n  static #_ = this.ɵfac = function OverlayModule_Factory(t) {\n    return new (t || OverlayModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: OverlayModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n    imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin],\n      exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n      providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n  constructor(_document, platform) {\n    super(_document, platform);\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n  _createContainer() {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n  _adjustParentForFullscreenChange() {\n    if (!this._containerElement) {\n      return;\n    }\n    const fullscreenElement = this.getFullscreenElement();\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n  _addFullscreenChangeListener(fn) {\n    const eventName = this._getEventName();\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n      this._document.addEventListener(eventName, fn);\n      this._fullScreenListener = fn;\n    }\n  }\n  _getEventName() {\n    if (!this._fullScreenEventName) {\n      const _document = this._document;\n      if (_document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (_document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if (_document.mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if (_document.msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n    return this._fullScreenEventName;\n  }\n\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   */\n  getFullscreenElement() {\n    const _document = this._document;\n    return _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement || null;\n  }\n  static #_ = this.ɵfac = function FullscreenOverlayContainer_Factory(t) {\n    return new (t || FullscreenOverlayContainer)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1$1.Platform));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: FullscreenOverlayContainer,\n    factory: FullscreenOverlayContainer.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1$1.Platform\n    }];\n  }, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, STANDARD_DROPDOWN_ADJACENT_POSITIONS, STANDARD_DROPDOWN_BELOW_POSITIONS, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };","map":{"version":3,"names":["i1","ScrollingModule","CdkScrollable","ScrollDispatcher","ViewportRuler","i6","DOCUMENT","i0","Injectable","Inject","Optional","ElementRef","ApplicationRef","ANIMATION_MODULE_TYPE","InjectionToken","Directive","EventEmitter","Input","Output","NgModule","coerceCssPixelValue","coerceArray","coerceBooleanProperty","i1$1","supportsScrollBehavior","_getEventTarget","_isTestEnvironment","filter","take","takeUntil","takeWhile","i5","BidiModule","DomPortalOutlet","TemplatePortal","PortalModule","Subject","Subscription","merge","ESCAPE","hasModifierKey","scrollBehaviorSupported","BlockScrollStrategy","constructor","_viewportRuler","document","_previousHTMLStyles","top","left","_isEnabled","_document","attach","enable","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","classList","add","disable","html","body","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","Error","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","hasAttached","run","detach","overlayRef","ngDevMode","stream","scrolled","pipe","scrollable","overlayElement","getElementRef","nativeElement","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","outsideBelow","outsideLeft","right","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","getBoundingClientRect","parentRects","ScrollStrategyOptions","noop","close","config","block","reposition","_","ɵfac","ScrollStrategyOptions_Factory","t","ɵɵinject","NgZone","_2","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ɵsetClassMetadata","type","args","undefined","decorators","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","Object","keys","key","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","value","validateHorizontalPosition","BaseOverlayDispatcher","_attachedOverlays","ngOnDestroy","push","index","indexOf","splice","length","BaseOverlayDispatcher_Factory","OverlayKeyboardDispatcher","_keydownListener","event","overlays","i","_keydownEvents","observers","keydownEvents","next","_isAttached","runOutsideAngular","addEventListener","removeEventListener","OverlayKeyboardDispatcher_Factory","OverlayOutsideClickDispatcher","_platform","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_clickListener","target","slice","_outsidePointerEvents","outsidePointerEvents","_addEventListeners","IOS","_cursorOriginalValue","cursor","OverlayOutsideClickDispatcher_Factory","Platform","OverlayContainer","_containerElement","getContainerElement","_createContainer","containerClass","isBrowser","oppositePlatformContainers","querySelectorAll","container","createElement","setAttribute","appendChild","OverlayContainer_Factory","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_animationsDisabled","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","EMPTY","_backdropClickHandler","_backdropTransitionendHandler","_disposeBackdrop","_scrollStrategy","_positionStrategy","positionStrategy","backdropElement","hostElement","portal","parentElement","_previousHostParent","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","onDestroy","Promise","resolve","then","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","complete","backdropClick","attachments","detachments","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","requestAnimationFrame","nextSibling","parentNode","backdropToDetach","_backdropTimeout","setTimeout","cssClasses","isAdd","c","subscription","children","backdrop","clearTimeout","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","positions","_preferredPositions","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","_containerRect","originRect","viewportRect","containerRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","rawOverlayRect","getRoundedBoundingClientRect","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","verticalFit","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","documentHeight","clientHeight","horizontalStyleProperty","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","forEach","pair","cssClass","Element","destination","source","hasOwnProperty","input","units","split","parseFloat","clientRect","floor","STANDARD_DROPDOWN_BELOW_POSITIONS","STANDARD_DROPDOWN_ADJACENT_POSITIONS","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_alignItems","_xPosition","_xOffset","_width","_height","end","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","xPosition","xOffset","marginLeft","marginRight","marginTop","marginBottom","parent","OverlayPositionBuilder","global","flexibleConnectedTo","OverlayPositionBuilder_Factory","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","_animationsModuleType","create","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","get","Overlay_Factory","ComponentFactoryResolver","Injector","Directionality","Location","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CdkOverlayOrigin","elementRef","CdkOverlayOrigin_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","exportAs","standalone","CdkConnectedOverlay","_position","_updatePositionStrategy","_hasBackdrop","lockPosition","_lockPosition","_flexibleDimensions","_push","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","viewportMargin","open","disableClose","positionChange","overlayKeydown","overlayOutsideClick","_templatePortal","_scrollStrategyFactory","ngOnChanges","changes","_attachOverlay","_detachOverlay","_createOverlay","_buildConfig","emit","keyCode","preventDefault","_createPositionStrategy","currentPosition","_getFlexibleConnectedPositionStrategyOrigin","transformOriginSelector","CdkConnectedOverlay_Factory","TemplateRef","ViewContainerRef","inputs","outputs","features","ɵɵNgOnChangesFeature","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","OverlayModule","OverlayModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","providers","imports","exports","FullscreenOverlayContainer","platform","_fullScreenEventName","_fullScreenListener","_adjustParentForFullscreenChange","_addFullscreenChangeListener","fullscreenElement","getFullscreenElement","fn","eventName","_getEventName","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","FullscreenOverlayContainer_Factory"],"sources":["/Users/fabriziovaccaro/Desktop/Fabri45555.github.io/node_modules/@angular/cdk/fesm2022/overlay.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/scrolling';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\n\nexport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport {DOCUMENT} from '@angular/common';\nimport * as i0 from '@angular/core';\nimport {\n  Injectable,\n  Inject,\n  Optional,\n  ElementRef,\n  ApplicationRef,\n  ANIMATION_MODULE_TYPE,\n  InjectionToken,\n  Directive,\n  EventEmitter,\n  Input,\n  Output,\n  NgModule\n} from '@angular/core';\nimport {coerceCssPixelValue, coerceArray, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport {supportsScrollBehavior, _getEventTarget, _isTestEnvironment} from '@angular/cdk/platform';\nimport {filter, take, takeUntil, takeWhile} from 'rxjs/operators';\nimport * as i5 from '@angular/cdk/bidi';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {DomPortalOutlet, TemplatePortal, PortalModule} from '@angular/cdk/portal';\nimport {Subject, Subscription, merge} from 'rxjs';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\n\nconst scrollBehaviorSupported = supportsScrollBehavior();\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n  constructor(_viewportRuler, document) {\n    this._viewportRuler = _viewportRuler;\n    this._previousHTMLStyles = {top: '', left: ''};\n    this._isEnabled = false;\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() {\n  }\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement;\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement;\n      const body = this._document.body;\n      const htmlStyle = html.style;\n      const bodyStyle = body.style;\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n      this._isEnabled = false;\n      htmlStyle.left = this._previousHTMLStyles.left;\n      htmlStyle.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n      // because it can throw off feature detections in `supportsScrollBehavior` which\n      // checks for `'scrollBehavior' in documentElement.style`.\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n      }\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n        bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n      }\n    }\n  }\n\n  _canBeEnabled() {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement;\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n    const body = this._document.body;\n    const viewport = this._viewportRuler.getViewportSize();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n  return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n  constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._config = _config;\n    this._scrollSubscription = null;\n    /** Detaches the overlay ref and disables the scroll strategy. */\n    this._detach = () => {\n      this.disable();\n      if (this._overlayRef.hasAttached()) {\n        this._ngZone.run(() => this._overlayRef.detach());\n      }\n    };\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables the closing of the attached overlay on scroll. */\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n    const stream = this._scrollDispatcher.scrolled(0).pipe(filter(scrollable => {\n      return (!scrollable ||\n        !this._overlayRef.overlayElement.contains(scrollable.getElementRef().nativeElement));\n    }));\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n\n  /** Disables the closing the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null;\n  }\n}\n\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() {\n  }\n\n  /** Does nothing, as this scroll strategy is a no-op. */\n  disable() {\n  }\n\n  /** Does nothing, as this scroll strategy is a no-op. */\n  attach() {\n  }\n}\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n  constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewportRuler = _viewportRuler;\n    this._ngZone = _ngZone;\n    this._config = _config;\n    this._scrollSubscription = null;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables repositioning of the attached overlay on scroll. */\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition();\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n          const {width, height} = this._viewportRuler.getViewportSize();\n          // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n\n  /** Disables repositioning of the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null;\n  }\n}\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n  constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewportRuler = _viewportRuler;\n    this._ngZone = _ngZone;\n    /** Do nothing on scroll. */\n    this.noop = () => new NoopScrollStrategy();\n    /**\n     * Close the overlay as soon as the user scrolls.\n     * @param config Configuration to be used inside the scroll strategy.\n     */\n    this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n    /** Block scrolling. */\n    this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n    /**\n     * Update the overlay's position on scroll.\n     * @param config Configuration to be used inside the scroll strategy.\n     * Allows debouncing the reposition calls.\n     */\n    this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n    this._document = document;\n  }\n\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: ScrollStrategyOptions,\n      deps: [{token: i1.ScrollDispatcher}, {token: i1.ViewportRuler}, {token: i0.NgZone}, {token: DOCUMENT}],\n      target: i0.ɵɵFactoryTarget.Injectable\n    });\n  }\n  static {\n    this.ɵprov = i0.ɵɵngDeclareInjectable({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: ScrollStrategyOptions,\n      providedIn: 'root'\n    });\n  }\n}\n\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n    type: Injectable,\n    args: [{providedIn: 'root'}]\n  }], ctorParameters: function () {\n    return [{type: i1.ScrollDispatcher}, {type: i1.ViewportRuler}, {type: i0.NgZone}, {\n      type: undefined, decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }\n});\n\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n  constructor(config) {\n    /** Strategy to be used when handling scroll events while the overlay is open. */\n    this.scrollStrategy = new NoopScrollStrategy();\n    /** Custom class to add to the overlay pane. */\n    this.panelClass = '';\n    /** Whether the overlay has a backdrop. */\n    this.hasBackdrop = false;\n    /** Custom class to add to the backdrop */\n    this.backdropClass = 'cdk-overlay-dark-backdrop';\n    /**\n     * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n    this.disposeOnNavigation = false;\n    if (config) {\n      // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n      // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n      // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n      const configKeys = Object.keys(config);\n      for (const key of configKeys) {\n        if (config[key] !== undefined) {\n          // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n          // as \"I don't know *which* key this is, so the only valid value is the intersection\n          // of all the possible values.\" In this case, that happens to be `undefined`. TypeScript\n          // is not smart enough to see that the right-hand-side is actually an access of the same\n          // exact type with the same exact key, meaning that the value type must be identical.\n          // So we use `any` to work around this.\n          this[key] = config[key];\n        }\n      }\n    }\n  }\n}\n\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n  constructor(origin, overlay,\n              /** Offset along the X axis. */\n              offsetX,\n              /** Offset along the Y axis. */\n              offsetY,\n              /** Class(es) to be applied to the panel while this position is active. */\n              panelClass) {\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n    this.panelClass = panelClass;\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n  constructor(\n    /** The position used as a result of this change. */\n    connectionPair,\n    /** @docs-private */\n    scrollableViewProperties) {\n    this.connectionPair = connectionPair;\n    this.scrollableViewProperties = scrollableViewProperties;\n  }\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n      `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n      `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n  constructor(document) {\n    /** Currently attached overlays in the order they were attached. */\n    this._attachedOverlays = [];\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this.detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef) {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef) {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this.detach();\n    }\n  }\n\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: BaseOverlayDispatcher,\n      deps: [{token: DOCUMENT}],\n      target: i0.ɵɵFactoryTarget.Injectable\n    });\n  }\n  static {\n    this.ɵprov = i0.ɵɵngDeclareInjectable({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: BaseOverlayDispatcher,\n      providedIn: 'root'\n    });\n  }\n}\n\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n    type: Injectable,\n    args: [{providedIn: 'root'}]\n  }], ctorParameters: function () {\n    return [{\n      type: undefined, decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }\n});\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n  constructor(document,\n              /** @breaking-change 14.0.0 _ngZone will be required. */\n              _ngZone) {\n    super(document);\n    this._ngZone = _ngZone;\n    /** Keyboard event listener that will be attached to the body. */\n    this._keydownListener = (event) => {\n      const overlays = this._attachedOverlays;\n      for (let i = overlays.length - 1; i > -1; i--) {\n        // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n        // We want to target the most recent overlay, rather than trying to match where the event came\n        // from, because some components might open an overlay, but keep focus on a trigger element\n        // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n        // because we don't want overlays that don't handle keyboard events to block the ones below\n        // them that do.\n        if (overlays[i]._keydownEvents.observers.length > 0) {\n          const keydownEvents = overlays[i]._keydownEvents;\n          /** @breaking-change 14.0.0 _ngZone will be required. */\n          if (this._ngZone) {\n            this._ngZone.run(() => keydownEvents.next(event));\n          } else {\n            keydownEvents.next(event);\n          }\n          break;\n        }\n      }\n    };\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef) {\n    super.add(overlayRef);\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      /** @breaking-change 14.0.0 _ngZone will be required. */\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));\n      } else {\n        this._document.body.addEventListener('keydown', this._keydownListener);\n      }\n      this._isAttached = true;\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener);\n      this._isAttached = false;\n    }\n  }\n\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: OverlayKeyboardDispatcher,\n      deps: [{token: DOCUMENT}, {token: i0.NgZone, optional: true}],\n      target: i0.ɵɵFactoryTarget.Injectable\n    });\n  }\n  static {\n    this.ɵprov = i0.ɵɵngDeclareInjectable({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: OverlayKeyboardDispatcher,\n      providedIn: 'root'\n    });\n  }\n}\n\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n    type: Injectable,\n    args: [{providedIn: 'root'}]\n  }], ctorParameters: function () {\n    return [{\n      type: undefined, decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.NgZone, decorators: [{\n        type: Optional\n      }]\n    }];\n  }\n});\n\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n  constructor(document, _platform,\n              /** @breaking-change 14.0.0 _ngZone will be required. */\n              _ngZone) {\n    super(document);\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._cursorStyleIsSet = false;\n    /** Store pointerdown event target to track origin of click. */\n    this._pointerDownListener = (event) => {\n      this._pointerDownEventTarget = _getEventTarget(event);\n    };\n    /** Click event listener that will be attached to the body propagate phase. */\n    this._clickListener = (event) => {\n      const target = _getEventTarget(event);\n      // In case of a click event, we want to check the origin of the click\n      // (e.g. in case where a user starts a click inside the overlay and\n      // releases the click outside of it).\n      // This is done by using the event target of the preceding pointerdown event.\n      // Every click event caused by a pointer device has a preceding pointerdown\n      // event, unless the click was programmatically triggered (e.g. in a unit test).\n      const origin = event.type === 'click' && this._pointerDownEventTarget\n        ? this._pointerDownEventTarget\n        : target;\n      // Reset the stored pointerdown event target, to avoid having it interfere\n      // in subsequent events.\n      this._pointerDownEventTarget = null;\n      // We copy the array because the original may be modified asynchronously if the\n      // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n      // the for loop.\n      const overlays = this._attachedOverlays.slice();\n      // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n      // We want to target all overlays for which the click could be considered as outside click.\n      // As soon as we reach an overlay for which the click is not outside click we break off\n      // the loop.\n      for (let i = overlays.length - 1; i > -1; i--) {\n        const overlayRef = overlays[i];\n        if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n          continue;\n        }\n        // If it's a click inside the overlay, just break - we should do nothing\n        // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n        // and proceed with the next overlay\n        if (overlayRef.overlayElement.contains(target) ||\n          overlayRef.overlayElement.contains(origin)) {\n          break;\n        }\n        const outsidePointerEvents = overlayRef._outsidePointerEvents;\n        /** @breaking-change 14.0.0 _ngZone will be required. */\n        if (this._ngZone) {\n          this._ngZone.run(() => outsidePointerEvents.next(event));\n        } else {\n          outsidePointerEvents.next(event);\n        }\n      }\n    };\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef) {\n    super.add(overlayRef);\n    // Safari on iOS does not generate click events for non-interactive\n    // elements. However, we want to receive a click for any element outside\n    // the overlay. We can force a \"clickable\" state by setting\n    // `cursor: pointer` on the document body. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n    // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n    if (!this._isAttached) {\n      const body = this._document.body;\n      /** @breaking-change 14.0.0 _ngZone will be required. */\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n      } else {\n        this._addEventListeners(body);\n      }\n      // click event is not fired on iOS. To make element \"clickable\" we are\n      // setting the cursor to pointer\n      if (this._platform.IOS && !this._cursorStyleIsSet) {\n        this._cursorOriginalValue = body.style.cursor;\n        body.style.cursor = 'pointer';\n        this._cursorStyleIsSet = true;\n      }\n      this._isAttached = true;\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  detach() {\n    if (this._isAttached) {\n      const body = this._document.body;\n      body.removeEventListener('pointerdown', this._pointerDownListener, true);\n      body.removeEventListener('click', this._clickListener, true);\n      body.removeEventListener('auxclick', this._clickListener, true);\n      body.removeEventListener('contextmenu', this._clickListener, true);\n      if (this._platform.IOS && this._cursorStyleIsSet) {\n        body.style.cursor = this._cursorOriginalValue;\n        this._cursorStyleIsSet = false;\n      }\n      this._isAttached = false;\n    }\n  }\n\n  _addEventListeners(body) {\n    body.addEventListener('pointerdown', this._pointerDownListener, true);\n    body.addEventListener('click', this._clickListener, true);\n    body.addEventListener('auxclick', this._clickListener, true);\n    body.addEventListener('contextmenu', this._clickListener, true);\n  }\n\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: OverlayOutsideClickDispatcher,\n      deps: [{token: DOCUMENT}, {token: i1$1.Platform}, {token: i0.NgZone, optional: true}],\n      target: i0.ɵɵFactoryTarget.Injectable\n    });\n  }\n  static {\n    this.ɵprov = i0.ɵɵngDeclareInjectable({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: OverlayOutsideClickDispatcher,\n      providedIn: 'root'\n    });\n  }\n}\n\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n    type: Injectable,\n    args: [{providedIn: 'root'}]\n  }], ctorParameters: function () {\n    return [{\n      type: undefined, decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {type: i1$1.Platform}, {\n      type: i0.NgZone, decorators: [{\n        type: Optional\n      }]\n    }];\n  }\n});\n\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n  constructor(document, _platform) {\n    this._platform = _platform;\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this._containerElement?.remove();\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement() {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  _createContainer() {\n    const containerClass = 'cdk-overlay-container';\n    // TODO(crisbeto): remove the testing check once we have an overlay testing\n    // module or Angular starts tearing down the testing `NgModule`. See:\n    // https://github.com/angular/angular/issues/18831\n    if (this._platform.isBrowser || _isTestEnvironment()) {\n      const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n      // Remove any old containers from the opposite platform.\n      // This can happen when transitioning from the server to the client.\n      for (let i = 0; i < oppositePlatformContainers.length; i++) {\n        oppositePlatformContainers[i].remove();\n      }\n    }\n    const container = this._document.createElement('div');\n    container.classList.add(containerClass);\n    // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n    // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n    // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n    // To mitigate the problem we made it so that only containers from a different platform are\n    // cleared, but the side-effect was that people started depending on the overly-aggressive\n    // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n    // module which does the cleanup, we try to detect that we're in a test environment and we\n    // always clear the container. See #17006.\n    // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n    if (_isTestEnvironment()) {\n      container.setAttribute('platform', 'test');\n    } else if (!this._platform.isBrowser) {\n      container.setAttribute('platform', 'server');\n    }\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: OverlayContainer,\n      deps: [{token: DOCUMENT}, {token: i1$1.Platform}],\n      target: i0.ɵɵFactoryTarget.Injectable\n    });\n  }\n  static {\n    this.ɵprov = i0.ɵɵngDeclareInjectable({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: OverlayContainer,\n      providedIn: 'root'\n    });\n  }\n}\n\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: OverlayContainer, decorators: [{\n    type: Injectable,\n    args: [{providedIn: 'root'}]\n  }], ctorParameters: function () {\n    return [{\n      type: undefined, decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {type: i1$1.Platform}];\n  }\n});\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n  constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher, _animationsDisabled = false) {\n    this._portalOutlet = _portalOutlet;\n    this._host = _host;\n    this._pane = _pane;\n    this._config = _config;\n    this._ngZone = _ngZone;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._document = _document;\n    this._location = _location;\n    this._outsideClickDispatcher = _outsideClickDispatcher;\n    this._animationsDisabled = _animationsDisabled;\n    this._backdropElement = null;\n    this._backdropClick = new Subject();\n    this._attachments = new Subject();\n    this._detachments = new Subject();\n    this._locationChanges = Subscription.EMPTY;\n    this._backdropClickHandler = (event) => this._backdropClick.next(event);\n    this._backdropTransitionendHandler = (event) => {\n      this._disposeBackdrop(event.target);\n    };\n    /** Stream of keydown events dispatched to this overlay. */\n    this._keydownEvents = new Subject();\n    /** Stream of mouse outside events dispatched to this overlay. */\n    this._outsidePointerEvents = new Subject();\n    if (_config.scrollStrategy) {\n      this._scrollStrategy = _config.scrollStrategy;\n      this._scrollStrategy.attach(this);\n    }\n    this._positionStrategy = _config.positionStrategy;\n  }\n\n  /** The overlay's HTML element */\n  get overlayElement() {\n    return this._pane;\n  }\n\n  /** The overlay's backdrop HTML element. */\n  get backdropElement() {\n    return this._backdropElement;\n  }\n\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n  get hostElement() {\n    return this._host;\n  }\n\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n  attach(portal) {\n    // Insert the host into the DOM before attaching the portal, otherwise\n    // the animations module will skip animations on repeat attachments.\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n    const attachResult = this._portalOutlet.attach(portal);\n    if (this._positionStrategy) {\n      this._positionStrategy.attach(this);\n    }\n    this._updateStackingOrder();\n    this._updateElementSize();\n    this._updateElementDirection();\n    if (this._scrollStrategy) {\n      this._scrollStrategy.enable();\n    }\n    // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n    this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      // The overlay could've been detached before the zone has stabilized.\n      if (this.hasAttached()) {\n        this.updatePosition();\n      }\n    });\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    }\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n    // Track this overlay by the keyboard dispatcher\n    this._keyboardDispatcher.add(this);\n    if (this._config.disposeOnNavigation) {\n      this._locationChanges = this._location.subscribe(() => this.dispose());\n    }\n    this._outsideClickDispatcher.add(this);\n    // TODO(crisbeto): the null check is here, because the portal outlet returns `any`.\n    // We should be guaranteed for the result to be `ComponentRef | EmbeddedViewRef`, but\n    // `instanceof EmbeddedViewRef` doesn't appear to work at the moment.\n    if (typeof attachResult?.onDestroy === 'function') {\n      // In most cases we control the portal and we know when it is being detached so that\n      // we can finish the disposal process. The exception is if the user passes in a custom\n      // `ViewContainerRef` that isn't destroyed through the overlay API. Note that we use\n      // `detach` here instead of `dispose`, because we don't know if the user intends to\n      // reattach the overlay at a later point. It also has the advantage of waiting for animations.\n      attachResult.onDestroy(() => {\n        if (this.hasAttached()) {\n          // We have to delay the `detach` call, because detaching immediately prevents\n          // other destroy hooks from running. This is likely a framework bug similar to\n          // https://github.com/angular/angular/issues/46119\n          this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => this.detach()));\n        }\n      });\n    }\n    return attachResult;\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n  detach() {\n    if (!this.hasAttached()) {\n      return;\n    }\n    this.detachBackdrop();\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n    if (this._positionStrategy && this._positionStrategy.detach) {\n      this._positionStrategy.detach();\n    }\n    if (this._scrollStrategy) {\n      this._scrollStrategy.disable();\n    }\n    const detachmentResult = this._portalOutlet.detach();\n    // Only emit after everything is detached.\n    this._detachments.next();\n    // Remove this overlay from keyboard dispatcher tracking.\n    this._keyboardDispatcher.remove(this);\n    // Keeping the host element in the DOM can cause scroll jank, because it still gets\n    // rendered, even though it's transparent and unclickable which is why we remove it.\n    this._detachContentWhenStable();\n    this._locationChanges.unsubscribe();\n    this._outsideClickDispatcher.remove(this);\n    return detachmentResult;\n  }\n\n  /** Cleans up the overlay from the DOM. */\n  dispose() {\n    const isAttached = this.hasAttached();\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n    this._disposeScrollStrategy();\n    this._disposeBackdrop(this._backdropElement);\n    this._locationChanges.unsubscribe();\n    this._keyboardDispatcher.remove(this);\n    this._portalOutlet.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._keydownEvents.complete();\n    this._outsidePointerEvents.complete();\n    this._outsideClickDispatcher.remove(this);\n    this._host?.remove();\n    this._previousHostParent = this._pane = this._host = null;\n    if (isAttached) {\n      this._detachments.next();\n    }\n    this._detachments.complete();\n  }\n\n  /** Whether the overlay has attached content. */\n  hasAttached() {\n    return this._portalOutlet.hasAttached();\n  }\n\n  /** Gets an observable that emits when the backdrop has been clicked. */\n  backdropClick() {\n    return this._backdropClick;\n  }\n\n  /** Gets an observable that emits when the overlay has been attached. */\n  attachments() {\n    return this._attachments;\n  }\n\n  /** Gets an observable that emits when the overlay has been detached. */\n  detachments() {\n    return this._detachments;\n  }\n\n  /** Gets an observable of keydown events targeted to this overlay. */\n  keydownEvents() {\n    return this._keydownEvents;\n  }\n\n  /** Gets an observable of pointer events targeted outside this overlay. */\n  outsidePointerEvents() {\n    return this._outsidePointerEvents;\n  }\n\n  /** Gets the current overlay configuration, which is immutable. */\n  getConfig() {\n    return this._config;\n  }\n\n  /** Updates the position of the overlay based on the position strategy. */\n  updatePosition() {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n\n  /** Switches to a new position strategy and updates the overlay position. */\n  updatePositionStrategy(strategy) {\n    if (strategy === this._positionStrategy) {\n      return;\n    }\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n    this._positionStrategy = strategy;\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      this.updatePosition();\n    }\n  }\n\n  /** Update the size properties of the overlay. */\n  updateSize(sizeConfig) {\n    this._config = {...this._config, ...sizeConfig};\n    this._updateElementSize();\n  }\n\n  /** Sets the LTR/RTL direction for the overlay. */\n  setDirection(dir) {\n    this._config = {...this._config, direction: dir};\n    this._updateElementDirection();\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes) {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, true);\n    }\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes) {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, false);\n    }\n  }\n\n  /**\n   * Returns the layout direction of the overlay panel.\n   */\n  getDirection() {\n    const direction = this._config.direction;\n    if (!direction) {\n      return 'ltr';\n    }\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n\n  /** Switches to a new scroll strategy. */\n  updateScrollStrategy(strategy) {\n    if (strategy === this._scrollStrategy) {\n      return;\n    }\n    this._disposeScrollStrategy();\n    this._scrollStrategy = strategy;\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      strategy.enable();\n    }\n  }\n\n  /** Updates the text direction of the overlay panel. */\n  _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n\n  /** Updates the size of the overlay element based on the overlay config. */\n  _updateElementSize() {\n    if (!this._pane) {\n      return;\n    }\n    const style = this._pane.style;\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n\n  /** Toggles the pointer events for the overlay pane element. */\n  _togglePointerEvents(enablePointer) {\n    this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n  }\n\n  /** Attaches a backdrop for this overlay. */\n  _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n    this._backdropElement = this._document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n    if (this._animationsDisabled) {\n      this._backdropElement.classList.add('cdk-overlay-backdrop-noop-animation');\n    }\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n    }\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._host.parentElement.insertBefore(this._backdropElement, this._host);\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', this._backdropClickHandler);\n    // Add class to fade-in the backdrop after one frame.\n    if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n  _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode.appendChild(this._host);\n    }\n  }\n\n  /** Detaches the backdrop (if any) associated with the overlay. */\n  detachBackdrop() {\n    const backdropToDetach = this._backdropElement;\n    if (!backdropToDetach) {\n      return;\n    }\n    if (this._animationsDisabled) {\n      this._disposeBackdrop(backdropToDetach);\n      return;\n    }\n    backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n    this._ngZone.runOutsideAngular(() => {\n      backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);\n    });\n    // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n    // In this case we make it unclickable and we try to remove it after a delay.\n    backdropToDetach.style.pointerEvents = 'none';\n    // Run this outside the Angular zone because there's nothing that Angular cares about.\n    // If it were to run inside the Angular zone, every test that used Overlay would have to be\n    // either async or fakeAsync.\n    this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n      this._disposeBackdrop(backdropToDetach);\n    }, 500));\n  }\n\n  /** Toggles a single CSS class or an array of classes on an element. */\n  _toggleClasses(element, cssClasses, isAdd) {\n    const classes = coerceArray(cssClasses || []).filter(c => !!c);\n    if (classes.length) {\n      isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n    }\n  }\n\n  /** Detaches the overlay content next time the zone stabilizes. */\n  _detachContentWhenStable() {\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n    // be patched to run inside the zone, which will throw us into an infinite loop.\n    this._ngZone.runOutsideAngular(() => {\n      // We can't remove the host here immediately, because the overlay pane's content\n      // might still be animating. This stream helps us avoid interrupting the animation\n      // by waiting for the pane to become empty.\n      const subscription = this._ngZone.onStable\n        .pipe(takeUntil(merge(this._attachments, this._detachments)))\n        .subscribe(() => {\n          // Needs a couple of checks for the pane and host, because\n          // they may have been removed by the time the zone stabilizes.\n          if (!this._pane || !this._host || this._pane.children.length === 0) {\n            if (this._pane && this._config.panelClass) {\n              this._toggleClasses(this._pane, this._config.panelClass, false);\n            }\n            if (this._host && this._host.parentElement) {\n              this._previousHostParent = this._host.parentElement;\n              this._host.remove();\n            }\n            subscription.unsubscribe();\n          }\n        });\n    });\n  }\n\n  /** Disposes of a scroll strategy. */\n  _disposeScrollStrategy() {\n    const scrollStrategy = this._scrollStrategy;\n    if (scrollStrategy) {\n      scrollStrategy.disable();\n      if (scrollStrategy.detach) {\n        scrollStrategy.detach();\n      }\n    }\n  }\n\n  /** Removes a backdrop element from the DOM. */\n  _disposeBackdrop(backdrop) {\n    if (backdrop) {\n      backdrop.removeEventListener('click', this._backdropClickHandler);\n      backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n      backdrop.remove();\n      // It is possible that a new portal has been attached to this overlay since we started\n      // removing the backdrop. If that is the case, only clear the backdrop reference if it\n      // is still the same instance that we started to remove.\n      if (this._backdropElement === backdrop) {\n        this._backdropElement = null;\n      }\n    }\n    if (this._backdropTimeout) {\n      clearTimeout(this._backdropTimeout);\n      this._backdropTimeout = undefined;\n    }\n  }\n}\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions() {\n    return this._preferredPositions;\n  }\n\n  constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n    /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n    this._lastBoundingBoxSize = {width: 0, height: 0};\n    /** Whether the overlay was pushed in a previous positioning. */\n    this._isPushed = false;\n    /** Whether the overlay can be pushed on-screen on the initial open. */\n    this._canPush = true;\n    /** Whether the overlay can grow via flexible width/height after the initial open. */\n    this._growAfterOpen = false;\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    this._hasFlexibleDimensions = true;\n    /** Whether the overlay position is locked. */\n    this._positionLocked = false;\n    /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n    this._viewportMargin = 0;\n    /** The Scrollable containers used to check scrollable view properties on position change. */\n    this._scrollables = [];\n    /** Ordered list of preferred positions, from most to least desirable. */\n    this._preferredPositions = [];\n    /** Subject that emits whenever the position changes. */\n    this._positionChanges = new Subject();\n    /** Subscription to viewport size changes. */\n    this._resizeSubscription = Subscription.EMPTY;\n    /** Default offset for the overlay along the x axis. */\n    this._offsetX = 0;\n    /** Default offset for the overlay along the y axis. */\n    this._offsetY = 0;\n    /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n    this._appliedPanelClasses = [];\n    /** Observable sequence of position changes. */\n    this.positionChanges = this._positionChanges;\n    this.setOrigin(connectedTo);\n  }\n\n  /** Attaches this position strategy to an overlay. */\n  attach(overlayRef) {\n    if (this._overlayRef &&\n      overlayRef !== this._overlayRef &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n    this._validatePositions();\n    overlayRef.hostElement.classList.add(boundingBoxClass);\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._isDisposed = false;\n    this._isInitialRender = true;\n    this._lastPosition = null;\n    this._resizeSubscription.unsubscribe();\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n      // When the window is resized, we want to trigger the next reposition as if it\n      // was an initial render, in order for the strategy to pick a new optimal position,\n      // otherwise position locking will cause it to stay at the old one.\n      this._isInitialRender = true;\n      this.apply();\n    });\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n  apply() {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    }\n    // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n    this._clearPanelClasses();\n    this._resetOverlayElementStyles();\n    this._resetBoundingBoxStyles();\n    // We need the bounding rects for the origin, the overlay and the container to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._getOriginRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n    this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect;\n    const containerRect = this._containerRect;\n    // Positions where the overlay will fit with flexible dimensions.\n    const flexibleFits = [];\n    // Fallback if none of the preferred positions fit within the viewport.\n    let fallback;\n    // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n      // Calculate how well the overlay would fit into the viewport with this point.\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n      // If the overlay, without any further work, fits into the viewport, use this position.\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n        this._applyPosition(pos, originPoint);\n        return;\n      }\n      // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n        });\n        continue;\n      }\n      // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\n      }\n    }\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n    if (flexibleFits.length) {\n      let bestFit = null;\n      let bestScore = -1;\n      for (const fit of flexibleFits) {\n        const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n      this._isPushed = false;\n      this._applyPosition(bestFit.position, bestFit.origin);\n      return;\n    }\n    // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n      this._applyPosition(fallback.position, fallback.originPoint);\n      return;\n    }\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n    this._applyPosition(fallback.position, fallback.originPoint);\n  }\n\n  detach() {\n    this._clearPanelClasses();\n    this._lastPosition = null;\n    this._previousPushAmount = null;\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /** Cleanup after the element gets destroyed. */\n  dispose() {\n    if (this._isDisposed) {\n      return;\n    }\n    // We can't use `_resetBoundingBoxStyles` here, because it resets\n    // some properties to zero, rather than removing them.\n    if (this._boundingBox) {\n      extendStyles(this._boundingBox.style, {\n        top: '',\n        left: '',\n        right: '',\n        bottom: '',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: '',\n      });\n    }\n    if (this._pane) {\n      this._resetOverlayElementStyles();\n    }\n    if (this._overlayRef) {\n      this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n    }\n    this.detach();\n    this._positionChanges.complete();\n    this._overlayRef = this._boundingBox = null;\n    this._isDisposed = true;\n  }\n\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  reapplyLastPosition() {\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    }\n    const lastPosition = this._lastPosition;\n    if (lastPosition) {\n      this._originRect = this._getOriginRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n      this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n      const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n      this._applyPosition(lastPosition, originPoint);\n    } else {\n      this.apply();\n    }\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables) {\n    this._scrollables = scrollables;\n    return this;\n  }\n\n  /**\n   * Adds new preferred positions.\n   * @param positions List of positions options for this overlay.\n   */\n  withPositions(positions) {\n    this._preferredPositions = positions;\n    // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n    if (positions.indexOf(this._lastPosition) === -1) {\n      this._lastPosition = null;\n    }\n    this._validatePositions();\n    return this;\n  }\n\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n  withViewportMargin(margin) {\n    this._viewportMargin = margin;\n    return this;\n  }\n\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n  withFlexibleDimensions(flexibleDimensions = true) {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n  withGrowAfterOpen(growAfterOpen = true) {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  withPush(canPush = true) {\n    this._canPush = canPush;\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked = true) {\n    this._positionLocked = isLocked;\n    return this;\n  }\n\n  /**\n   * Sets the origin, relative to which to position the overlay.\n   * Using an element origin is useful for building components that need to be positioned\n   * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n   * used for cases like contextual menus which open relative to the user's pointer.\n   * @param origin Reference to the new origin.\n   */\n  setOrigin(origin) {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n  withDefaultOffsetX(offset) {\n    this._offsetX = offset;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n  withDefaultOffsetY(offset) {\n    this._offsetY = offset;\n    return this;\n  }\n\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   */\n  withTransformOriginOn(selector) {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n  _getOriginPoint(originRect, containerRect, pos) {\n    let x;\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + originRect.width / 2;\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n    // When zooming in Safari the container rectangle contains negative values for the position\n    // and we need to re-add them to the calculated coordinates.\n    if (containerRect.left < 0) {\n      x -= containerRect.left;\n    }\n    let y;\n    if (pos.originY == 'center') {\n      y = originRect.top + originRect.height / 2;\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n    // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n    // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n    // Additionally, when zooming in Safari this fixes the vertical position.\n    if (containerRect.top < 0) {\n      y -= containerRect.top;\n    }\n    return {x, y};\n  }\n\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n  _getOverlayPoint(originPoint, overlayRect, pos) {\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n    let overlayStartY;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n    // The (x, y) coordinates of the overlay.\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY,\n    };\n  }\n\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n  _getOverlayFit(point, rawOverlayRect, viewport, position) {\n    // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    let {x, y} = point;\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n    // Account for the offsets since they could push the overlay out of the viewport.\n    if (offsetX) {\n      x += offsetX;\n    }\n    if (offsetY) {\n      y += offsetY;\n    }\n    // How much the overlay would overflow at this position, on each side.\n    let leftOverflow = 0 - x;\n    let rightOverflow = x + overlay.width - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = y + overlay.height - viewport.height;\n    // Visible parts of the element on each axis.\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n    let visibleArea = visibleWidth * visibleHeight;\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width,\n    };\n  }\n\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlay at some position.\n   * @param viewport The geometry of the viewport.\n   */\n  _canFitWithFlexibleDimensions(fit, point, viewport) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n      const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n      const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n      const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n      return verticalFit && horizontalFit;\n    }\n    return false;\n  }\n\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the\n   * right and bottom).\n   *\n   * @param start Starting point from which the overlay is pushed.\n   * @param rawOverlayRect Dimensions of the overlay.\n   * @param scrollPosition Current viewport scroll position.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n  _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\n    if (this._previousPushAmount && this._positionLocked) {\n      return {\n        x: start.x + this._previousPushAmount.x,\n        y: start.y + this._previousPushAmount.y,\n      };\n    }\n    // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    const viewport = this._viewportRect;\n    // Determine how much the overlay goes outside the viewport on each\n    // side, which we'll use to decide which direction to push it.\n    const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n    // Amount by which to push the overlay in each axis such that it remains on-screen.\n    let pushX = 0;\n    let pushY = 0;\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n    if (overlay.width <= viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n    }\n    if (overlay.height <= viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n    }\n    this._previousPushAmount = {x: pushX, y: pushY};\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY,\n    };\n  }\n\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n  _applyPosition(position, originPoint) {\n    this._setTransformOrigin(position);\n    this._setOverlayElementStyles(originPoint, position);\n    this._setBoundingBoxStyles(originPoint, position);\n    if (position.panelClass) {\n      this._addPanelClasses(position.panelClass);\n    }\n    // Save the last connected position in case the position needs to be re-calculated.\n    this._lastPosition = position;\n    // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculations can be somewhat expensive.\n    if (this._positionChanges.observers.length) {\n      const scrollableViewProperties = this._getScrollVisibility();\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n      this._positionChanges.next(changeEvent);\n    }\n    this._isInitialRender = false;\n  }\n\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\n  _setTransformOrigin(position) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n    const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n    let xOrigin;\n    let yOrigin = position.overlayY;\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n  _calculateBoundingBoxRect(origin, position) {\n    const viewport = this._viewportRect;\n    const isRtl = this._isRtl();\n    let height, top, bottom;\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.height - top + this._viewportMargin;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay is vertically centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n      // `origin.y - viewport.top`.\n      const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n      const previousHeight = this._lastBoundingBoxSize.height;\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - previousHeight / 2;\n      }\n    }\n    // The overlay is opening 'right-ward' (the content flows to the right).\n    const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n    // The overlay is opening 'left-ward' (the content flows to the left).\n    const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n    let width, left, right;\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.width - origin.x + this._viewportMargin;\n      width = origin.x - this._viewportMargin;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay is horizontally centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.right - origin.x` and\n      // `origin.x - viewport.left`.\n      const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n      const previousWidth = this._lastBoundingBoxSize.width;\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - previousWidth / 2;\n      }\n    }\n    return {top: top, left: left, bottom: bottom, right: right, width, height};\n  }\n\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stretches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n  _setBoundingBoxStyles(origin, position) {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n    const styles = {};\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\n      // Push the pane content towards the proper direction.\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n    this._lastBoundingBoxSize = boundingBoxRect;\n    extendStyles(this._boundingBox.style, styles);\n  }\n\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n  _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: '',\n    });\n  }\n\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n  _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n      transform: '',\n    });\n  }\n\n  /** Sets positioning styles to the overlay element. */\n  _setOverlayElementStyles(originPoint, position) {\n    const styles = {};\n    const hasExactPosition = this._hasExactPosition();\n    const hasFlexibleDimensions = this._hasFlexibleDimensions;\n    const config = this._overlayRef.getConfig();\n    if (hasExactPosition) {\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n    } else {\n      styles.position = 'static';\n    }\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n    let transformString = '';\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n    styles.transform = transformString.trim();\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    // Note that this doesn't apply when we have an exact position, in which case we do want to\n    // apply them because they'll be cleared from the bounding box.\n    if (config.maxHeight) {\n      if (hasExactPosition) {\n        styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n      } else if (hasFlexibleDimensions) {\n        styles.maxHeight = '';\n      }\n    }\n    if (config.maxWidth) {\n      if (hasExactPosition) {\n        styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n      } else if (hasFlexibleDimensions) {\n        styles.maxWidth = '';\n      }\n    }\n    extendStyles(this._pane.style, styles);\n  }\n\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n  _getExactOverlayY(position, originPoint, scrollPosition) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {top: '', bottom: ''};\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n    return styles;\n  }\n\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n  _getExactOverlayX(position, originPoint, scrollPosition) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {left: '', right: ''};\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let horizontalStyleProperty;\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    }\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n    return styles;\n  }\n\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n  _getScrollVisibility() {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._getOriginRect();\n    const overlayBounds = this._pane.getBoundingClientRect();\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n    const scrollContainerBounds = this._scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n\n  /** Subtracts the amount that an element is overflowing on an axis from its length. */\n  _subtractOverflows(length, ...overflows) {\n    return overflows.reduce((currentValue, currentOverflow) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n  _getNarrowedViewportRect() {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement.clientWidth;\n    const height = this._document.documentElement.clientHeight;\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n    return {\n      top: scrollPosition.top + this._viewportMargin,\n      left: scrollPosition.left + this._viewportMargin,\n      right: scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width: width - 2 * this._viewportMargin,\n      height: height - 2 * this._viewportMargin,\n    };\n  }\n\n  /** Whether the we're dealing with an RTL context */\n  _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Determines whether the overlay uses exact or flexible positioning. */\n  _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n\n  /** Retrieves the offset of a position along the x or y axis. */\n  _getOffset(position, axis) {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breaking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n\n  /** Validates that the current position match the expected values. */\n  _validatePositions() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._preferredPositions.length) {\n        throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n      }\n      // TODO(crisbeto): remove these once Angular's template type\n      // checking is advanced enough to catch these cases.\n      this._preferredPositions.forEach(pair => {\n        validateHorizontalPosition('originX', pair.originX);\n        validateVerticalPosition('originY', pair.originY);\n        validateHorizontalPosition('overlayX', pair.overlayX);\n        validateVerticalPosition('overlayY', pair.overlayY);\n      });\n    }\n  }\n\n  /** Adds a single CSS class or an array of classes on the overlay panel. */\n  _addPanelClasses(cssClasses) {\n    if (this._pane) {\n      coerceArray(cssClasses).forEach(cssClass => {\n        if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n          this._appliedPanelClasses.push(cssClass);\n          this._pane.classList.add(cssClass);\n        }\n      });\n    }\n  }\n\n  /** Clears the classes that the position strategy has applied from the overlay panel. */\n  _clearPanelClasses() {\n    if (this._pane) {\n      this._appliedPanelClasses.forEach(cssClass => {\n        this._pane.classList.remove(cssClass);\n      });\n      this._appliedPanelClasses = [];\n    }\n  }\n\n  /** Returns the ClientRect of the current origin. */\n  _getOriginRect() {\n    const origin = this._origin;\n    if (origin instanceof ElementRef) {\n      return origin.nativeElement.getBoundingClientRect();\n    }\n    // Check for Element so SVG elements are also supported.\n    if (origin instanceof Element) {\n      return origin.getBoundingClientRect();\n    }\n    const width = origin.width || 0;\n    const height = origin.height || 0;\n    // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n    return {\n      top: origin.y,\n      bottom: origin.y + height,\n      left: origin.x,\n      right: origin.x + width,\n      height,\n      width,\n    };\n  }\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      destination[key] = source[key];\n    }\n  }\n  return destination;\n}\n\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n  if (typeof input !== 'number' && input != null) {\n    const [value, units] = input.split(cssUnitPattern);\n    return !units || units === 'px' ? parseFloat(value) : null;\n  }\n  return input || null;\n}\n\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n  return {\n    top: Math.floor(clientRect.top),\n    right: Math.floor(clientRect.right),\n    bottom: Math.floor(clientRect.bottom),\n    left: Math.floor(clientRect.left),\n    width: Math.floor(clientRect.width),\n    height: Math.floor(clientRect.height),\n  };\n}\n\nconst STANDARD_DROPDOWN_BELOW_POSITIONS = [\n  {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n  {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'},\n  {originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top'},\n  {originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom'},\n];\nconst STANDARD_DROPDOWN_ADJACENT_POSITIONS = [\n  {originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top'},\n  {originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom'},\n  {originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top'},\n  {originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'bottom'},\n];\n\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n  constructor() {\n    this._cssPosition = 'static';\n    this._topOffset = '';\n    this._bottomOffset = '';\n    this._alignItems = '';\n    this._xPosition = '';\n    this._xOffset = '';\n    this._width = '';\n    this._height = '';\n    this._isDisposed = false;\n  }\n\n  attach(overlayRef) {\n    const config = overlayRef.getConfig();\n    this._overlayRef = overlayRef;\n    if (this._width && !config.width) {\n      overlayRef.updateSize({width: this._width});\n    }\n    if (this._height && !config.height) {\n      overlayRef.updateSize({height: this._height});\n    }\n    overlayRef.hostElement.classList.add(wrapperClass);\n    this._isDisposed = false;\n  }\n\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n  top(value = '') {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n  left(value = '') {\n    this._xOffset = value;\n    this._xPosition = 'left';\n    return this;\n  }\n\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n  bottom(value = '') {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n  right(value = '') {\n    this._xOffset = value;\n    this._xPosition = 'right';\n    return this;\n  }\n\n  /**\n   * Sets the overlay to the start of the viewport, depending on the overlay direction.\n   * This will be to the left in LTR layouts and to the right in RTL.\n   * @param offset Offset from the edge of the screen.\n   */\n  start(value = '') {\n    this._xOffset = value;\n    this._xPosition = 'start';\n    return this;\n  }\n\n  /**\n   * Sets the overlay to the end of the viewport, depending on the overlay direction.\n   * This will be to the right in LTR layouts and to the left in RTL.\n   * @param offset Offset from the edge of the screen.\n   */\n  end(value = '') {\n    this._xOffset = value;\n    this._xPosition = 'end';\n    return this;\n  }\n\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  width(value = '') {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({width: value});\n    } else {\n      this._width = value;\n    }\n    return this;\n  }\n\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  height(value = '') {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({height: value});\n    } else {\n      this._height = value;\n    }\n    return this;\n  }\n\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n  centerHorizontally(offset = '') {\n    this.left(offset);\n    this._xPosition = 'center';\n    return this;\n  }\n\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n  centerVertically(offset = '') {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n  apply() {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      return;\n    }\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n    const config = this._overlayRef.getConfig();\n    const {width, height, maxWidth, maxHeight} = config;\n    const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n      (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n    const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n      (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n    const xPosition = this._xPosition;\n    const xOffset = this._xOffset;\n    const isRtl = this._overlayRef.getConfig().direction === 'rtl';\n    let marginLeft = '';\n    let marginRight = '';\n    let justifyContent = '';\n    if (shouldBeFlushHorizontally) {\n      justifyContent = 'flex-start';\n    } else if (xPosition === 'center') {\n      justifyContent = 'center';\n      if (isRtl) {\n        marginRight = xOffset;\n      } else {\n        marginLeft = xOffset;\n      }\n    } else if (isRtl) {\n      if (xPosition === 'left' || xPosition === 'end') {\n        justifyContent = 'flex-end';\n        marginLeft = xOffset;\n      } else if (xPosition === 'right' || xPosition === 'start') {\n        justifyContent = 'flex-start';\n        marginRight = xOffset;\n      }\n    } else if (xPosition === 'left' || xPosition === 'start') {\n      justifyContent = 'flex-start';\n      marginLeft = xOffset;\n    } else if (xPosition === 'right' || xPosition === 'end') {\n      justifyContent = 'flex-end';\n      marginRight = xOffset;\n    }\n    styles.position = this._cssPosition;\n    styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;\n    styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;\n    parentStyles.justifyContent = justifyContent;\n    parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n  }\n\n  /**\n   * Cleans up the DOM changes from the position strategy.\n   * @docs-private\n   */\n  dispose() {\n    if (this._isDisposed || !this._overlayRef) {\n      return;\n    }\n    const styles = this._overlayRef.overlayElement.style;\n    const parent = this._overlayRef.hostElement;\n    const parentStyles = parent.style;\n    parent.classList.remove(wrapperClass);\n    parentStyles.justifyContent =\n      parentStyles.alignItems =\n        styles.marginTop =\n          styles.marginBottom =\n            styles.marginLeft =\n              styles.marginRight =\n                styles.position =\n                  '';\n    this._overlayRef = null;\n    this._isDisposed = true;\n  }\n}\n\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n  constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n  }\n\n  /**\n   * Creates a global position strategy.\n   */\n  global() {\n    return new GlobalPositionStrategy();\n  }\n\n  /**\n   * Creates a flexible position strategy.\n   * @param origin Origin relative to which to position the overlay.\n   */\n  flexibleConnectedTo(origin) {\n    return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n  }\n\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: OverlayPositionBuilder,\n      deps: [{token: i1.ViewportRuler}, {token: DOCUMENT}, {token: i1$1.Platform}, {token: OverlayContainer}],\n      target: i0.ɵɵFactoryTarget.Injectable\n    });\n  }\n  static {\n    this.ɵprov = i0.ɵɵngDeclareInjectable({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: OverlayPositionBuilder,\n      providedIn: 'root'\n    });\n  }\n}\n\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n    type: Injectable,\n    args: [{providedIn: 'root'}]\n  }], ctorParameters: function () {\n    return [{type: i1.ViewportRuler}, {\n      type: undefined, decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {type: i1$1.Platform}, {type: OverlayContainer}];\n  }\n});\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n  constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher, _animationsModuleType) {\n    this.scrollStrategies = scrollStrategies;\n    this._overlayContainer = _overlayContainer;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._positionBuilder = _positionBuilder;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._injector = _injector;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._directionality = _directionality;\n    this._location = _location;\n    this._outsideClickDispatcher = _outsideClickDispatcher;\n    this._animationsModuleType = _animationsModuleType;\n  }\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config) {\n    const host = this._createHostElement();\n    const pane = this._createPaneElement(host);\n    const portalOutlet = this._createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher, this._animationsModuleType === 'NoopAnimations');\n  }\n\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n  position() {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  _createPaneElement(host) {\n    const pane = this._document.createElement('div');\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  _createHostElement() {\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  _createPortalOutlet(pane) {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get(ApplicationRef);\n    }\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n  }\n\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: Overlay,\n      deps: [{token: ScrollStrategyOptions}, {token: OverlayContainer}, {token: i0.ComponentFactoryResolver}, {token: OverlayPositionBuilder}, {token: OverlayKeyboardDispatcher}, {token: i0.Injector}, {token: i0.NgZone}, {token: DOCUMENT}, {token: i5.Directionality}, {token: i6.Location}, {token: OverlayOutsideClickDispatcher}, {\n        token: ANIMATION_MODULE_TYPE,\n        optional: true\n      }],\n      target: i0.ɵɵFactoryTarget.Injectable\n    });\n  }\n  static {\n    this.ɵprov = i0.ɵɵngDeclareInjectable({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: Overlay,\n      providedIn: 'root'\n    });\n  }\n}\n\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Overlay, decorators: [{\n    type: Injectable,\n    args: [{providedIn: 'root'}]\n  }], ctorParameters: function () {\n    return [{type: ScrollStrategyOptions}, {type: OverlayContainer}, {type: i0.ComponentFactoryResolver}, {type: OverlayPositionBuilder}, {type: OverlayKeyboardDispatcher}, {type: i0.Injector}, {type: i0.NgZone}, {\n      type: undefined, decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {type: i5.Directionality}, {type: i6.Location}, {type: OverlayOutsideClickDispatcher}, {\n      type: undefined, decorators: [{\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }\n});\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top',\n  },\n  {\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom',\n  },\n  {\n    originX: 'end',\n    originY: 'top',\n    overlayX: 'end',\n    overlayY: 'bottom',\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top',\n  },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n  constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n    this.elementRef = elementRef;\n  }\n\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: CdkOverlayOrigin,\n      deps: [{token: i0.ElementRef}],\n      target: i0.ɵɵFactoryTarget.Directive\n    });\n  }\n  static {\n    this.ɵdir = i0.ɵɵngDeclareDirective({\n      minVersion: \"14.0.0\",\n      version: \"16.1.1\",\n      type: CdkOverlayOrigin,\n      isStandalone: true,\n      selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\",\n      exportAs: [\"cdkOverlayOrigin\"],\n      ngImport: i0\n    });\n  }\n}\n\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n      exportAs: 'cdkOverlayOrigin',\n      standalone: true,\n    }]\n  }], ctorParameters: function () {\n    return [{type: i0.ElementRef}];\n  }\n});\n\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n  /** The offset in pixels for the overlay connection point on the x-axis */\n  get offsetX() {\n    return this._offsetX;\n  }\n\n  set offsetX(offsetX) {\n    this._offsetX = offsetX;\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The offset in pixels for the overlay connection point on the y-axis */\n  get offsetY() {\n    return this._offsetY;\n  }\n\n  set offsetY(offsetY) {\n    this._offsetY = offsetY;\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** Whether or not the overlay should attach a backdrop. */\n  get hasBackdrop() {\n    return this._hasBackdrop;\n  }\n\n  set hasBackdrop(value) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n\n  /** Whether or not the overlay should be locked when scrolling. */\n  get lockPosition() {\n    return this._lockPosition;\n  }\n\n  set lockPosition(value) {\n    this._lockPosition = coerceBooleanProperty(value);\n  }\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  get flexibleDimensions() {\n    return this._flexibleDimensions;\n  }\n\n  set flexibleDimensions(value) {\n    this._flexibleDimensions = coerceBooleanProperty(value);\n  }\n\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n  get growAfterOpen() {\n    return this._growAfterOpen;\n  }\n\n  set growAfterOpen(value) {\n    this._growAfterOpen = coerceBooleanProperty(value);\n  }\n\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  get push() {\n    return this._push;\n  }\n\n  set push(value) {\n    this._push = coerceBooleanProperty(value);\n  }\n\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n  constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n    this._overlay = _overlay;\n    this._dir = _dir;\n    this._hasBackdrop = false;\n    this._lockPosition = false;\n    this._growAfterOpen = false;\n    this._flexibleDimensions = false;\n    this._push = false;\n    this._backdropSubscription = Subscription.EMPTY;\n    this._attachSubscription = Subscription.EMPTY;\n    this._detachSubscription = Subscription.EMPTY;\n    this._positionSubscription = Subscription.EMPTY;\n    /** Margin between the overlay and the viewport edges. */\n    this.viewportMargin = 0;\n    /** Whether the overlay is open. */\n    this.open = false;\n    /** Whether the overlay can be closed by user interaction. */\n    this.disableClose = false;\n    /** Event emitted when the backdrop is clicked. */\n    this.backdropClick = new EventEmitter();\n    /** Event emitted when the position has changed. */\n    this.positionChange = new EventEmitter();\n    /** Event emitted when the overlay has been attached. */\n    this.attach = new EventEmitter();\n    /** Event emitted when the overlay has been detached. */\n    this.detach = new EventEmitter();\n    /** Emits when there are keyboard events that are targeted at the overlay. */\n    this.overlayKeydown = new EventEmitter();\n    /** Emits when there are mouse outside click events that are targeted at the overlay. */\n    this.overlayOutsideClick = new EventEmitter();\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n\n  /** The associated overlay reference. */\n  get overlayRef() {\n    return this._overlayRef;\n  }\n\n  /** The element's layout direction. */\n  get dir() {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  ngOnDestroy() {\n    this._attachSubscription.unsubscribe();\n    this._detachSubscription.unsubscribe();\n    this._backdropSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight,\n      });\n      if (changes['origin'] && this.open) {\n        this._position.apply();\n      }\n    }\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n\n  /** Creates an overlay */\n  _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n    const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n    this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n    this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n    overlayRef.keydownEvents().subscribe((event) => {\n      this.overlayKeydown.next(event);\n      if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n        event.preventDefault();\n        this._detachOverlay();\n      }\n    });\n    this._overlayRef.outsidePointerEvents().subscribe((event) => {\n      this.overlayOutsideClick.next(event);\n    });\n  }\n\n  /** Builds the overlay config based on the directive's inputs */\n  _buildConfig() {\n    const positionStrategy = (this._position =\n      this.positionStrategy || this._createPositionStrategy());\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir,\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop,\n    });\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n    if (this.panelClass) {\n      overlayConfig.panelClass = this.panelClass;\n    }\n    return overlayConfig;\n  }\n\n  /** Updates the state of a position strategy, based on the values of the directive inputs. */\n  _updatePositionStrategy(positionStrategy) {\n    const positions = this.positions.map(currentPosition => ({\n      originX: currentPosition.originX,\n      originY: currentPosition.originY,\n      overlayX: currentPosition.overlayX,\n      overlayY: currentPosition.overlayY,\n      offsetX: currentPosition.offsetX || this.offsetX,\n      offsetY: currentPosition.offsetY || this.offsetY,\n      panelClass: currentPosition.panelClass || undefined,\n    }));\n    return positionStrategy\n      .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n      .withPositions(positions)\n      .withFlexibleDimensions(this.flexibleDimensions)\n      .withPush(this.push)\n      .withGrowAfterOpen(this.growAfterOpen)\n      .withViewportMargin(this.viewportMargin)\n      .withLockedPosition(this.lockPosition)\n      .withTransformOriginOn(this.transformOriginSelector);\n  }\n\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n  _createPositionStrategy() {\n    const strategy = this._overlay\n      .position()\n      .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n    this._updatePositionStrategy(strategy);\n    return strategy;\n  }\n\n  _getFlexibleConnectedPositionStrategyOrigin() {\n    if (this.origin instanceof CdkOverlayOrigin) {\n      return this.origin.elementRef;\n    } else {\n      return this.origin;\n    }\n  }\n\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n  _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n    }\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n    }\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    } else {\n      this._backdropSubscription.unsubscribe();\n    }\n    this._positionSubscription.unsubscribe();\n    // Only subscribe to `positionChanges` if requested, because putting\n    // together all the information for it can be expensive.\n    if (this.positionChange.observers.length > 0) {\n      this._positionSubscription = this._position.positionChanges\n        .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n        .subscribe(position => {\n          this.positionChange.emit(position);\n          if (this.positionChange.observers.length === 0) {\n            this._positionSubscription.unsubscribe();\n          }\n        });\n    }\n  }\n\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n  _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n    }\n    this._backdropSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n  }\n\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: CdkConnectedOverlay,\n      deps: [{token: Overlay}, {token: i0.TemplateRef}, {token: i0.ViewContainerRef}, {token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY}, {\n        token: i5.Directionality,\n        optional: true\n      }],\n      target: i0.ɵɵFactoryTarget.Directive\n    });\n  }\n  static {\n    this.ɵdir = i0.ɵɵngDeclareDirective({\n      minVersion: \"14.0.0\",\n      version: \"16.1.1\",\n      type: CdkConnectedOverlay,\n      isStandalone: true,\n      selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\",\n      inputs: {\n        origin: [\"cdkConnectedOverlayOrigin\", \"origin\"],\n        positions: [\"cdkConnectedOverlayPositions\", \"positions\"],\n        positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"],\n        offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"],\n        offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"],\n        width: [\"cdkConnectedOverlayWidth\", \"width\"],\n        height: [\"cdkConnectedOverlayHeight\", \"height\"],\n        minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"],\n        minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"],\n        backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"],\n        panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"],\n        viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"],\n        scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"],\n        open: [\"cdkConnectedOverlayOpen\", \"open\"],\n        disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"],\n        transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"],\n        hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"],\n        lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"],\n        flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"],\n        growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"],\n        push: [\"cdkConnectedOverlayPush\", \"push\"]\n      },\n      outputs: {\n        backdropClick: \"backdropClick\",\n        positionChange: \"positionChange\",\n        attach: \"attach\",\n        detach: \"detach\",\n        overlayKeydown: \"overlayKeydown\",\n        overlayOutsideClick: \"overlayOutsideClick\"\n      },\n      exportAs: [\"cdkConnectedOverlay\"],\n      usesOnChanges: true,\n      ngImport: i0\n    });\n  }\n}\n\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n      exportAs: 'cdkConnectedOverlay',\n      standalone: true,\n    }]\n  }], ctorParameters: function () {\n    return [{type: Overlay}, {type: i0.TemplateRef}, {type: i0.ViewContainerRef}, {\n      type: undefined, decorators: [{\n        type: Inject,\n        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: i5.Directionality, decorators: [{\n        type: Optional\n      }]\n    }];\n  }, propDecorators: {\n    origin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOrigin']\n    }], positions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPositions']\n    }], positionStrategy: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPositionStrategy']\n    }], offsetX: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetX']\n    }], offsetY: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetY']\n    }], width: [{\n      type: Input,\n      args: ['cdkConnectedOverlayWidth']\n    }], height: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHeight']\n    }], minWidth: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinWidth']\n    }], minHeight: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinHeight']\n    }], backdropClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayBackdropClass']\n    }], panelClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPanelClass']\n    }], viewportMargin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayViewportMargin']\n    }], scrollStrategy: [{\n      type: Input,\n      args: ['cdkConnectedOverlayScrollStrategy']\n    }], open: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOpen']\n    }], disableClose: [{\n      type: Input,\n      args: ['cdkConnectedOverlayDisableClose']\n    }], transformOriginSelector: [{\n      type: Input,\n      args: ['cdkConnectedOverlayTransformOriginOn']\n    }], hasBackdrop: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHasBackdrop']\n    }], lockPosition: [{\n      type: Input,\n      args: ['cdkConnectedOverlayLockPosition']\n    }], flexibleDimensions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayFlexibleDimensions']\n    }], growAfterOpen: [{\n      type: Input,\n      args: ['cdkConnectedOverlayGrowAfterOpen']\n    }], push: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPush']\n    }], backdropClick: [{\n      type: Output\n    }], positionChange: [{\n      type: Output\n    }], attach: [{\n      type: Output\n    }], detach: [{\n      type: Output\n    }], overlayKeydown: [{\n      type: Output\n    }], overlayOutsideClick: [{\n      type: Output\n    }]\n  }\n});\n\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\nclass OverlayModule {\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: OverlayModule,\n      deps: [],\n      target: i0.ɵɵFactoryTarget.NgModule\n    });\n  }\n  static {\n    this.ɵmod = i0.ɵɵngDeclareNgModule({\n      minVersion: \"14.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: OverlayModule,\n      imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin],\n      exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule]\n    });\n  }\n  static {\n    this.ɵinj = i0.ɵɵngDeclareInjector({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: OverlayModule,\n      providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n      imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule]\n    });\n  }\n}\n\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: OverlayModule, decorators: [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin],\n      exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n      providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n    }]\n  }]\n});\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n  constructor(_document, platform) {\n    super(_document, platform);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n\n  _createContainer() {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  _adjustParentForFullscreenChange() {\n    if (!this._containerElement) {\n      return;\n    }\n    const fullscreenElement = this.getFullscreenElement();\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  _addFullscreenChangeListener(fn) {\n    const eventName = this._getEventName();\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n      this._document.addEventListener(eventName, fn);\n      this._fullScreenListener = fn;\n    }\n  }\n\n  _getEventName() {\n    if (!this._fullScreenEventName) {\n      const _document = this._document;\n      if (_document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (_document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if (_document.mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if (_document.msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n    return this._fullScreenEventName;\n  }\n\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   */\n  getFullscreenElement() {\n    const _document = this._document;\n    return (_document.fullscreenElement ||\n      _document.webkitFullscreenElement ||\n      _document.mozFullScreenElement ||\n      _document.msFullscreenElement ||\n      null);\n  }\n\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: FullscreenOverlayContainer,\n      deps: [{token: DOCUMENT}, {token: i1$1.Platform}],\n      target: i0.ɵɵFactoryTarget.Injectable\n    });\n  }\n  static {\n    this.ɵprov = i0.ɵɵngDeclareInjectable({\n      minVersion: \"12.0.0\",\n      version: \"16.1.1\",\n      ngImport: i0,\n      type: FullscreenOverlayContainer,\n      providedIn: 'root'\n    });\n  }\n}\n\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n    type: Injectable,\n    args: [{providedIn: 'root'}]\n  }], ctorParameters: function () {\n    return [{\n      type: undefined, decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {type: i1$1.Platform}];\n  }\n});\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport {\n  BlockScrollStrategy,\n  CdkConnectedOverlay,\n  CdkOverlayOrigin,\n  CloseScrollStrategy,\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  FlexibleConnectedPositionStrategy,\n  FullscreenOverlayContainer,\n  GlobalPositionStrategy,\n  NoopScrollStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayKeyboardDispatcher,\n  OverlayModule,\n  OverlayOutsideClickDispatcher,\n  OverlayPositionBuilder,\n  OverlayRef,\n  RepositionScrollStrategy,\n  STANDARD_DROPDOWN_ADJACENT_POSITIONS,\n  STANDARD_DROPDOWN_BELOW_POSITIONS,\n  ScrollStrategyOptions,\n  ScrollingVisibility,\n  validateHorizontalPosition,\n  validateVerticalPosition\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/innerFrom';\nexport function retry(configOrCount = Infinity) {\n  let config;\n  if (configOrCount && typeof configOrCount === 'object') {\n    config = configOrCount;\n  } else {\n    config = {\n      count: configOrCount\n    };\n  }\n  const {\n    count = Infinity,\n    delay,\n    resetOnSuccess = false\n  } = config;\n  return count <= 0 ? identity : operate((source, subscriber) => {\n    let soFar = 0;\n    let innerSub;\n    const subscribeForRetry = () => {\n      let syncUnsub = false;\n      innerSub = source.subscribe(createOperatorSubscriber(subscriber, value => {\n        if (resetOnSuccess) {\n          soFar = 0;\n        }\n        subscriber.next(value);\n      }, undefined, err => {\n        if (soFar++ < count) {\n          const resub = () => {\n            if (innerSub) {\n              innerSub.unsubscribe();\n              innerSub = null;\n              subscribeForRetry();\n            } else {\n              syncUnsub = true;\n            }\n          };\n          if (delay != null) {\n            const notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n            const notifierSubscriber = createOperatorSubscriber(subscriber, () => {\n              notifierSubscriber.unsubscribe();\n              resub();\n            }, () => {\n              subscriber.complete();\n            });\n            notifier.subscribe(notifierSubscriber);\n          } else {\n            resub();\n          }\n        } else {\n          subscriber.error(err);\n        }\n      }));\n      if (syncUnsub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        subscribeForRetry();\n      }\n    };\n    subscribeForRetry();\n  });\n}","map":{"version":3,"names":["operate","createOperatorSubscriber","identity","timer","innerFrom","retry","configOrCount","Infinity","config","count","delay","resetOnSuccess","source","subscriber","soFar","innerSub","subscribeForRetry","syncUnsub","subscribe","value","next","undefined","err","resub","unsubscribe","notifier","notifierSubscriber","complete","error"],"sources":["/Users/fabriziovaccaro/Desktop/Fabri45555.github.io/node_modules/rxjs/dist/esm/internal/operators/retry.js"],"sourcesContent":["import {operate} from '../util/lift';\nimport {createOperatorSubscriber} from './OperatorSubscriber';\nimport {identity} from '../util/identity';\nimport {timer} from '../observable/timer';\nimport {innerFrom} from '../observable/innerFrom';\n\nexport function retry(configOrCount = Infinity) {\n  let config;\n  if (configOrCount && typeof configOrCount === 'object') {\n    config = configOrCount;\n  } else {\n    config = {\n      count: configOrCount,\n    };\n  }\n  const {count = Infinity, delay, resetOnSuccess: resetOnSuccess = false} = config;\n  return count <= 0\n    ? identity\n    : operate((source, subscriber) => {\n      let soFar = 0;\n      let innerSub;\n      const subscribeForRetry = () => {\n        let syncUnsub = false;\n        innerSub = source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n          if (resetOnSuccess) {\n            soFar = 0;\n          }\n          subscriber.next(value);\n        }, undefined, (err) => {\n          if (soFar++ < count) {\n            const resub = () => {\n              if (innerSub) {\n                innerSub.unsubscribe();\n                innerSub = null;\n                subscribeForRetry();\n              } else {\n                syncUnsub = true;\n              }\n            };\n            if (delay != null) {\n              const notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n              const notifierSubscriber = createOperatorSubscriber(subscriber, () => {\n                notifierSubscriber.unsubscribe();\n                resub();\n              }, () => {\n                subscriber.complete();\n              });\n              notifier.subscribe(notifierSubscriber);\n            } else {\n              resub();\n            }\n          } else {\n            subscriber.error(err);\n          }\n        }));\n        if (syncUnsub) {\n          innerSub.unsubscribe();\n          innerSub = null;\n          subscribeForRetry();\n        }\n      };\n      subscribeForRetry();\n    });\n}\n\n"],"mappings":"AAAA,SAAQA,OAAO,QAAO,cAAc;AACpC,SAAQC,wBAAwB,QAAO,sBAAsB;AAC7D,SAAQC,QAAQ,QAAO,kBAAkB;AACzC,SAAQC,KAAK,QAAO,qBAAqB;AACzC,SAAQC,SAAS,QAAO,yBAAyB;AAEjD,OAAO,SAASC,KAAKA,CAACC,aAAa,GAAGC,QAAQ,EAAE;EAC9C,IAAIC,MAAM;EACV,IAAIF,aAAa,IAAI,OAAOA,aAAa,KAAK,QAAQ,EAAE;IACtDE,MAAM,GAAGF,aAAa;EACxB,CAAC,MAAM;IACLE,MAAM,GAAG;MACPC,KAAK,EAAEH;IACT,CAAC;EACH;EACA,MAAM;IAACG,KAAK,GAAGF,QAAQ;IAAEG,KAAK;IAAkBC,cAAc,GAAG;EAAK,CAAC,GAAGH,MAAM;EAChF,OAAOC,KAAK,IAAI,CAAC,GACbP,QAAQ,GACRF,OAAO,CAAC,CAACY,MAAM,EAAEC,UAAU,KAAK;IAChC,IAAIC,KAAK,GAAG,CAAC;IACb,IAAIC,QAAQ;IACZ,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;MAC9B,IAAIC,SAAS,GAAG,KAAK;MACrBF,QAAQ,GAAGH,MAAM,CAACM,SAAS,CAACjB,wBAAwB,CAACY,UAAU,EAAGM,KAAK,IAAK;QAC1E,IAAIR,cAAc,EAAE;UAClBG,KAAK,GAAG,CAAC;QACX;QACAD,UAAU,CAACO,IAAI,CAACD,KAAK,CAAC;MACxB,CAAC,EAAEE,SAAS,EAAGC,GAAG,IAAK;QACrB,IAAIR,KAAK,EAAE,GAAGL,KAAK,EAAE;UACnB,MAAMc,KAAK,GAAGA,CAAA,KAAM;YAClB,IAAIR,QAAQ,EAAE;cACZA,QAAQ,CAACS,WAAW,CAAC,CAAC;cACtBT,QAAQ,GAAG,IAAI;cACfC,iBAAiB,CAAC,CAAC;YACrB,CAAC,MAAM;cACLC,SAAS,GAAG,IAAI;YAClB;UACF,CAAC;UACD,IAAIP,KAAK,IAAI,IAAI,EAAE;YACjB,MAAMe,QAAQ,GAAG,OAAOf,KAAK,KAAK,QAAQ,GAAGP,KAAK,CAACO,KAAK,CAAC,GAAGN,SAAS,CAACM,KAAK,CAACY,GAAG,EAAER,KAAK,CAAC,CAAC;YACxF,MAAMY,kBAAkB,GAAGzB,wBAAwB,CAACY,UAAU,EAAE,MAAM;cACpEa,kBAAkB,CAACF,WAAW,CAAC,CAAC;cAChCD,KAAK,CAAC,CAAC;YACT,CAAC,EAAE,MAAM;cACPV,UAAU,CAACc,QAAQ,CAAC,CAAC;YACvB,CAAC,CAAC;YACFF,QAAQ,CAACP,SAAS,CAACQ,kBAAkB,CAAC;UACxC,CAAC,MAAM;YACLH,KAAK,CAAC,CAAC;UACT;QACF,CAAC,MAAM;UACLV,UAAU,CAACe,KAAK,CAACN,GAAG,CAAC;QACvB;MACF,CAAC,CAAC,CAAC;MACH,IAAIL,SAAS,EAAE;QACbF,QAAQ,CAACS,WAAW,CAAC,CAAC;QACtBT,QAAQ,GAAG,IAAI;QACfC,iBAAiB,CAAC,CAAC;MACrB;IACF,CAAC;IACDA,iBAAiB,CAAC,CAAC;EACrB,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}
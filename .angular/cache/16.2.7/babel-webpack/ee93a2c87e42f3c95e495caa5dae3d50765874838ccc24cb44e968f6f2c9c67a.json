{"ast":null,"code":"import { isScheduler } from '../util/isScheduler';\nimport { Observable } from '../Observable';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { observeOn } from '../operators/observeOn';\nimport { AsyncSubject } from '../AsyncSubject';\nexport function bindCallbackInternals(isNodeStyle, callbackFunc, resultSelector, scheduler) {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      return function (...args) {\n        return bindCallbackInternals(isNodeStyle, callbackFunc, scheduler).apply(this, args).pipe(mapOneOrManyArgs(resultSelector));\n      };\n    }\n  }\n  if (scheduler) {\n    return function (...args) {\n      return bindCallbackInternals(isNodeStyle, callbackFunc).apply(this, args).pipe(subscribeOn(scheduler), observeOn(scheduler));\n    };\n  }\n  return function (...args) {\n    const subject = new AsyncSubject();\n    let uninitialized = true;\n    return new Observable(subscriber => {\n      const subs = subject.subscribe(subscriber);\n      if (uninitialized) {\n        uninitialized = false;\n        let isAsync = false;\n        let isComplete = false;\n        callbackFunc.apply(this, [...args, (...results) => {\n          if (isNodeStyle) {\n            const err = results.shift();\n            if (err != null) {\n              subject.error(err);\n              return;\n            }\n          }\n          subject.next(1 < results.length ? results : results[0]);\n          isComplete = true;\n          if (isAsync) {\n            subject.complete();\n          }\n        }]);\n        if (isComplete) {\n          subject.complete();\n        }\n        isAsync = true;\n      }\n      return subs;\n    });\n  };\n}","map":{"version":3,"names":["isScheduler","Observable","subscribeOn","mapOneOrManyArgs","observeOn","AsyncSubject","bindCallbackInternals","isNodeStyle","callbackFunc","resultSelector","scheduler","args","apply","pipe","subject","uninitialized","subscriber","subs","subscribe","isAsync","isComplete","results","err","shift","error","next","length","complete"],"sources":["/Users/fabriziovaccaro/Desktop/Fabri45555.github.io/node_modules/rxjs/dist/esm/internal/observable/bindCallbackInternals.js"],"sourcesContent":["import {isScheduler} from '../util/isScheduler';\nimport {Observable} from '../Observable';\nimport {subscribeOn} from '../operators/subscribeOn';\nimport {mapOneOrManyArgs} from '../util/mapOneOrManyArgs';\nimport {observeOn} from '../operators/observeOn';\nimport {AsyncSubject} from '../AsyncSubject';\n\nexport function bindCallbackInternals(isNodeStyle, callbackFunc, resultSelector, scheduler) {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      return function (...args) {\n        return bindCallbackInternals(isNodeStyle, callbackFunc, scheduler)\n          .apply(this, args)\n          .pipe(mapOneOrManyArgs(resultSelector));\n      };\n    }\n  }\n  if (scheduler) {\n    return function (...args) {\n      return bindCallbackInternals(isNodeStyle, callbackFunc)\n        .apply(this, args)\n        .pipe(subscribeOn(scheduler), observeOn(scheduler));\n    };\n  }\n  return function (...args) {\n    const subject = new AsyncSubject();\n    let uninitialized = true;\n    return new Observable((subscriber) => {\n      const subs = subject.subscribe(subscriber);\n      if (uninitialized) {\n        uninitialized = false;\n        let isAsync = false;\n        let isComplete = false;\n        callbackFunc.apply(this, [\n          ...args,\n          (...results) => {\n            if (isNodeStyle) {\n              const err = results.shift();\n              if (err != null) {\n                subject.error(err);\n                return;\n              }\n            }\n            subject.next(1 < results.length ? results : results[0]);\n            isComplete = true;\n            if (isAsync) {\n              subject.complete();\n            }\n          },\n        ]);\n        if (isComplete) {\n          subject.complete();\n        }\n        isAsync = true;\n      }\n      return subs;\n    });\n  };\n}\n\n"],"mappings":"AAAA,SAAQA,WAAW,QAAO,qBAAqB;AAC/C,SAAQC,UAAU,QAAO,eAAe;AACxC,SAAQC,WAAW,QAAO,0BAA0B;AACpD,SAAQC,gBAAgB,QAAO,0BAA0B;AACzD,SAAQC,SAAS,QAAO,wBAAwB;AAChD,SAAQC,YAAY,QAAO,iBAAiB;AAE5C,OAAO,SAASC,qBAAqBA,CAACC,WAAW,EAAEC,YAAY,EAAEC,cAAc,EAAEC,SAAS,EAAE;EAC1F,IAAID,cAAc,EAAE;IAClB,IAAIT,WAAW,CAACS,cAAc,CAAC,EAAE;MAC/BC,SAAS,GAAGD,cAAc;IAC5B,CAAC,MAAM;MACL,OAAO,UAAU,GAAGE,IAAI,EAAE;QACxB,OAAOL,qBAAqB,CAACC,WAAW,EAAEC,YAAY,EAAEE,SAAS,CAAC,CAC/DE,KAAK,CAAC,IAAI,EAAED,IAAI,CAAC,CACjBE,IAAI,CAACV,gBAAgB,CAACM,cAAc,CAAC,CAAC;MAC3C,CAAC;IACH;EACF;EACA,IAAIC,SAAS,EAAE;IACb,OAAO,UAAU,GAAGC,IAAI,EAAE;MACxB,OAAOL,qBAAqB,CAACC,WAAW,EAAEC,YAAY,CAAC,CACpDI,KAAK,CAAC,IAAI,EAAED,IAAI,CAAC,CACjBE,IAAI,CAACX,WAAW,CAACQ,SAAS,CAAC,EAAEN,SAAS,CAACM,SAAS,CAAC,CAAC;IACvD,CAAC;EACH;EACA,OAAO,UAAU,GAAGC,IAAI,EAAE;IACxB,MAAMG,OAAO,GAAG,IAAIT,YAAY,CAAC,CAAC;IAClC,IAAIU,aAAa,GAAG,IAAI;IACxB,OAAO,IAAId,UAAU,CAAEe,UAAU,IAAK;MACpC,MAAMC,IAAI,GAAGH,OAAO,CAACI,SAAS,CAACF,UAAU,CAAC;MAC1C,IAAID,aAAa,EAAE;QACjBA,aAAa,GAAG,KAAK;QACrB,IAAII,OAAO,GAAG,KAAK;QACnB,IAAIC,UAAU,GAAG,KAAK;QACtBZ,YAAY,CAACI,KAAK,CAAC,IAAI,EAAE,CACvB,GAAGD,IAAI,EACP,CAAC,GAAGU,OAAO,KAAK;UACd,IAAId,WAAW,EAAE;YACf,MAAMe,GAAG,GAAGD,OAAO,CAACE,KAAK,CAAC,CAAC;YAC3B,IAAID,GAAG,IAAI,IAAI,EAAE;cACfR,OAAO,CAACU,KAAK,CAACF,GAAG,CAAC;cAClB;YACF;UACF;UACAR,OAAO,CAACW,IAAI,CAAC,CAAC,GAAGJ,OAAO,CAACK,MAAM,GAAGL,OAAO,GAAGA,OAAO,CAAC,CAAC,CAAC,CAAC;UACvDD,UAAU,GAAG,IAAI;UACjB,IAAID,OAAO,EAAE;YACXL,OAAO,CAACa,QAAQ,CAAC,CAAC;UACpB;QACF,CAAC,CACF,CAAC;QACF,IAAIP,UAAU,EAAE;UACdN,OAAO,CAACa,QAAQ,CAAC,CAAC;QACpB;QACAR,OAAO,GAAG,IAAI;MAChB;MACA,OAAOF,IAAI;IACb,CAAC,CAAC;EACJ,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}
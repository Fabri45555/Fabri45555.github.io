{"ast":null,"code":"import { operate } from '../util/lift';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { mergeAll } from './mergeAll';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from '../observable/from';\nexport function merge(...args) {\n  const scheduler = popScheduler(args);\n  const concurrent = popNumber(args, Infinity);\n  args = argsOrArgArray(args);\n  return operate((source, subscriber) => {\n    mergeAll(concurrent)(from([source, ...args], scheduler)).subscribe(subscriber);\n  });\n}","map":{"version":3,"names":["operate","argsOrArgArray","mergeAll","popNumber","popScheduler","from","merge","args","scheduler","concurrent","Infinity","source","subscriber","subscribe"],"sources":["/Users/fabriziovaccaro/Desktop/Fabri45555.github.io/node_modules/rxjs/dist/esm/internal/operators/merge.js"],"sourcesContent":["import {operate} from '../util/lift';\nimport {argsOrArgArray} from '../util/argsOrArgArray';\nimport {mergeAll} from './mergeAll';\nimport {popNumber, popScheduler} from '../util/args';\nimport {from} from '../observable/from';\n\nexport function merge(...args) {\n  const scheduler = popScheduler(args);\n  const concurrent = popNumber(args, Infinity);\n  args = argsOrArgArray(args);\n  return operate((source, subscriber) => {\n    mergeAll(concurrent)(from([source, ...args], scheduler)).subscribe(subscriber);\n  });\n}\n\n"],"mappings":"AAAA,SAAQA,OAAO,QAAO,cAAc;AACpC,SAAQC,cAAc,QAAO,wBAAwB;AACrD,SAAQC,QAAQ,QAAO,YAAY;AACnC,SAAQC,SAAS,EAAEC,YAAY,QAAO,cAAc;AACpD,SAAQC,IAAI,QAAO,oBAAoB;AAEvC,OAAO,SAASC,KAAKA,CAAC,GAAGC,IAAI,EAAE;EAC7B,MAAMC,SAAS,GAAGJ,YAAY,CAACG,IAAI,CAAC;EACpC,MAAME,UAAU,GAAGN,SAAS,CAACI,IAAI,EAAEG,QAAQ,CAAC;EAC5CH,IAAI,GAAGN,cAAc,CAACM,IAAI,CAAC;EAC3B,OAAOP,OAAO,CAAC,CAACW,MAAM,EAAEC,UAAU,KAAK;IACrCV,QAAQ,CAACO,UAAU,CAAC,CAACJ,IAAI,CAAC,CAACM,MAAM,EAAE,GAAGJ,IAAI,CAAC,EAAEC,SAAS,CAAC,CAAC,CAACK,SAAS,CAACD,UAAU,CAAC;EAChF,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}
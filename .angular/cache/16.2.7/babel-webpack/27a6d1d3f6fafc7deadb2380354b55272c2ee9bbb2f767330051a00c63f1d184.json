{"ast":null,"code":"import { isFunction } from './isFunction';\nexport function hasLift(source) {\n  return isFunction(source === null || source === void 0 ? void 0 : source.lift);\n}\nexport function operate(init) {\n  return source => {\n    if (hasLift(source)) {\n      return source.lift(function (liftedSource) {\n        try {\n          return init(liftedSource, this);\n        } catch (err) {\n          this.error(err);\n        }\n      });\n    }\n    throw new TypeError('Unable to lift unknown Observable type');\n  };\n}","map":{"version":3,"names":["isFunction","hasLift","source","lift","operate","init","liftedSource","err","error","TypeError"],"sources":["/Users/fabriziovaccaro/Desktop/Fabri45555.github.io/node_modules/rxjs/dist/esm/internal/util/lift.js"],"sourcesContent":["import {isFunction} from './isFunction';\n\nexport function hasLift(source) {\n  return isFunction(source === null || source === void 0 ? void 0 : source.lift);\n}\n\nexport function operate(init) {\n  return (source) => {\n    if (hasLift(source)) {\n      return source.lift(function (liftedSource) {\n        try {\n          return init(liftedSource, this);\n        } catch (err) {\n          this.error(err);\n        }\n      });\n    }\n    throw new TypeError('Unable to lift unknown Observable type');\n  };\n}\n\n"],"mappings":"AAAA,SAAQA,UAAU,QAAO,cAAc;AAEvC,OAAO,SAASC,OAAOA,CAACC,MAAM,EAAE;EAC9B,OAAOF,UAAU,CAACE,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACC,IAAI,CAAC;AAChF;AAEA,OAAO,SAASC,OAAOA,CAACC,IAAI,EAAE;EAC5B,OAAQH,MAAM,IAAK;IACjB,IAAID,OAAO,CAACC,MAAM,CAAC,EAAE;MACnB,OAAOA,MAAM,CAACC,IAAI,CAAC,UAAUG,YAAY,EAAE;QACzC,IAAI;UACF,OAAOD,IAAI,CAACC,YAAY,EAAE,IAAI,CAAC;QACjC,CAAC,CAAC,OAAOC,GAAG,EAAE;UACZ,IAAI,CAACC,KAAK,CAACD,GAAG,CAAC;QACjB;MACF,CAAC,CAAC;IACJ;IACA,MAAM,IAAIE,SAAS,CAAC,wCAAwC,CAAC;EAC/D,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}